swagger: "2.0"
info:
  title: stayway
  version: 1.0.0
host: "localhost:3000"
schemes:
  - http
basePath: "/api"
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  iDPCognito:
    in: header
    name: Authorization
    type: apiKey
    description: CognitoIDPから取得するDToken
paths:
  /users:
    post:
      tags: [user]
      summary: ユーザー登録
      description: |
        アイコン、ヘッダ画像はフロント側でS3にアップロードし、UUIDを送信する。
        そのUUIDからアップロードされた画像を特定し、S3上の/users/icon/${userID}に移動する。
      parameters:
        - in: body
          name: profile
          required: true
          schema:
            $ref: '#/definitions/UserRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/User'
        "400":
          description: バリデーションエラーまたは既に存在するユーザー
          schema:
            $ref: '#/definitions/Error'
      security:
        - iDPCognito: []
    put:
      tags: [user]
      summary: プロフィール更新
      description: ユーザープロフィール更新
      parameters:
        - in: body
          name: profile
          required: true
          schema:
            $ref: '#/definitions/UserRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/User'
        "400":
          description: バリデーションエラー
          schema:
            $ref: '#/definitions/Error'
      security:
        - iDPCognito: []
  /users/ranking:
    get:
      tags: [user]
      summary: ユーザーランキング取得
      security:
        - iDPCognito: []
      parameters:
        - in: query
          name: areaId
          type: integer
          description: エリアID
        - in: query
          name: subAreaId
          type: integer
          description: サブエリアID
        - in: query
          name: subSubAreaId
          type: integer
          description: サブサブエリアID
        - in: query
          name: sortBy
          type: string
          enum:
              - recommended
              - popularity
          default: recommended
          description: 並び順 (おすすめ順, 人気順)
        - in: query
          name: fromDate
          type: string
          format: date
          description: 記事や投稿写真を絞る開始日 (例)2019-01-01
          example: 2019-01-01
        - in: query
          name: toDate
          type: string
          format: date
          description: 記事や投稿写真を絞る終了日 (例)2019-01-31
          example: 2019-01-31
        - in: query
          name: page
          type: integer
          default: 1
          required: false
          description: 何ページ目
        - in: query
          name: perPage
          type: integer
          default: 30
          required: false
          description: ページ当たり取得件数
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/User'
  /s3:
    post:
      security:
        - iDPCognito: []
      tags: [s3]
      summary: S3アップロードに使用する署名付きURLを生成
      description: |
        フロントはこれを使用してS3にファイルをアップロードし、ファイル添付系のAPIでUUIDを渡す。
      parameters:
        - in: body
          name: s3
          required: true
          schema:
            type: object
            properties:
              contentType:
                type: string
                format: mime
      responses:
        "200":
          description: 成功
          schema:
            type: object
            properties:
              uuid:
                type: string
              url:
                type: string
                description: PutObjectに使用する署名付きURL
  /review:
    get:
      tags: [review]
      summary: レビュー検索
      parameters:
        - in: query
          name: userId
          type: integer
          description: 指定したユーザーが投稿したレビューを取得する
        - in: query
          name: innId
          type: integer
          description: innに紐づくレビューを取得する
        - in: query
          name: spotId
          type: integer
          description: spotに紐づくレビューを取得する
        - in: query
          name: hashtag
          type: string
          description: hashtagに紐づくレビューを取得する
        - in: query
          name: areaId
          type: integer
          description: |
            areaに紐づくレビューを取得する
            (categoryテーブル)
        - in: query
          name: subAreaId
          type: integer
          description: |
            subAreaに紐づくレビューを取得する
            (categoryテーブル)
        - in: query
          name: subSubAreaId
          type: integer
          description: |
            subSubAreaに紐づくレビューを取得する
            (categoryテーブル)
        - $ref: '#/parameters/SortBy'
        - in: query
          name: perPage
          type: integer
          default: 10
        - in: query
          name: page
          type: integer
          default: 1
      responses:
        "200":
          description: 成功
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
    post:
      tags: [review]
      summary: レビュー投稿
      security:
        - iDPCognito: []
      parameters:
        - in: body
          name: review
          required: true
          schema:
            $ref: '#/definitions/ReviewRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/Review'
        "400":
          description: バリデーションエラー
          schema:
            $ref: '#/definitions/Error'
  /review/:id:
    get:
      tags: [review]
      summary: レビュー取得
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: レビューID
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/Review'
        "404":
          description: 存在しないレビュー
          schema:
            $ref: '#/definitions/Error'
    put:
      tags: [review]
      summary: レビュー更新
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: レビューID
        - in: body
          name: review
          required: true
          schema:
            $ref: '#/definitions/ReviewRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/Review'
        "400":
          description: バリデーションエラー
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: 自分のものでない投稿を更新しようとした時
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: 存在しないレビュー
          schema:
            $ref: '#/definitions/Error'
  /review/:id/comment:
    get:
      tags: [review]
      summary: レビューのコメントを取得する
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: レビューID
      responses:
        "200":
          description: 成功
          schema:
            type: array
            items:
              $ref: '#/definitions/ReviewComment'
        "404":
          description: 存在しないレビュー
          schema:
            $ref: '#/definitions/Error'
    post:
      tags: [review]
      summary: レビューにコメントを投稿する
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: レビューID
        - in: body
          name: review
          required: true
          schema:
            $ref: '#/definitions/ReviewCommentRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/Review'
        "400":
          description: バリデーションエラー
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: 存在しないレビュー
          schema:
            $ref: '#/definitions/Error'
  /review/:id/favorite:
    put:
      tags: [review]
      summary: レビューをfavする
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
      responses:
        "204":
          description: 成功
        "404":
          description: 存在しないレビュー
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags: [review]
      summary: レビューをunfavする
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
      responses:
        "204":
          description: 成功
        "404":
          description: 存在しないレビュー
          schema:
            $ref: '#/definitions/Error'

  /review/feed/{userId}:
    get:
      tags:
        - review
      summary: フォローしているユーザー又はハッシュタグの記事取得API
      description: userIdで指定されたユーザーがフォローしているユーザー又はハッシュタグの記事取得
      parameters:
        - in: path
          name: userId
          type: integer
          required: true
          description: ユーザーID
        - in: query
          name: page
          type: integer
          description: ページ数(pagination時)
          default: 1
        - in: query
          name: perPage
          type: integer
          description: 件数
          default: 30
      responses:
        "200":
          description: 成功
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'

  /review/search:
    get:
      tags:
        - review
      summary: フリーワード検索
      description: |
        フリーワード対象を取得
        複数ワードで検索可能
        その場合、レスポンスは全てのワードに引っ掛かる物である事
        以下の順番で返る)
        ・本文にフリーワードが含めれているものを返す(作成日時順)
      parameters:
        - in: query
          name: q
          type: string
          description: |
            検索ワード
            複数の場合「+」で連結
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'

  /inns:
    get:
      tags:
        - inn
      summary: 宿絞り込み
      parameters:
        - in: query
          name: area_id
          type: integer
          format: int64
        - in: query
          name: sub_area_id
          type: integer
          format: int64
        - in: query
          name: sub_sub_area_id
          type: integer
          format: int64
        - in: query
          name: station_id
          type: integer
          format: int64
        - in: query
          name: spot_id
          type: integer
          format: int64
        - in: query
          name: inn_types
          type: array
          items:
            type: integer
        - in: query
          name: room_types
          type: array
          items:
            type: integer
        - in: query
          name: room_count
          type: integer
        - in: query
          name: bed_count
          type: integer
        - in: query
          name: price_min
          type: integer
          format: int64
        - in: query
          name: price_max
          type: integer
          format: int64
        - in: query
          name: brand_id
          type: integer
          format: int64
        - in: query
          name: tags
          type: array
          items:
            type: integer
        - in: query
          name: place
          type: string
        - in: query
          name: sort
          type: string
        - in: query
          name: offset
          type: integer
        - in: query
          name: per_page
          type: integer
      responses:
        '200':
          description: 成功
          schema:
            type: object
            properties:
              Rectangle:
                $ref: '#/definitions/Rectangle'
              Inns:
                type: array
                items:
                  $ref: '#/definitions/Inn'
              HasNext:
                type: boolean
        '400':
          description: エリアを絞り込むパラメータが一個もない場合
  /plan:
    get:
      tags:
        - plan
      summary: プラン検索
      parameters:
        - in: query
          name: ids
          type: array
          items:
            type: integer
            format: int64
          description: プラン検索する宿のID
        - in: query
          name: checkin
          type: string
          description: "チェックイン日 (例)2019-07-07"
        - in: query
          name: checkout
          type: string
          description: "チェックアウト日 (例)2019-07-07"
        - in: query
          name: adults
          type: integer
        - in: query
          name: children
          type: integer
        - in: query
          name: infants
          type: integer
      responses:
        '200':
          description: 成功
          schema:
            type: array
            items:
              $ref: '#/definitions/PlanResponse'
        '400':
          description: エリアを絞り込むパラメータが一個もない場合

  /posts:
    get:
      tags:
        - post
      summary: 記事取得API
      description: パラメータで指定された条件で検索(組み合わせる事も可能)
      parameters:
        - in: query
          name: areaId
          type: integer
          description: |
            エリアID
            いずれか1つ以上必須
        - in: query
          name: subAreaId
          type: integer
          description: |
            サブエリアID
            いずれか1つ以上必須
        - in: query
          name: subSubAreaId
          type: integer
          description: |
            サブサブエリアID
            いずれか1つ以上必須
        - in: query
          name: themeId
          type: integer
          description: |
            テーマID
            いずれか1つ以上必須
        - in: query
          name: touristSpotId
          type: integer
          description: |
            観光スポットID
            いずれか１つ以上必須
        - in: query
          name: hashTag
          type: string
          description: |
            ハッシュタグ
            いずれか1つ以上必須
        - $ref: '#/parameters/SortBy'
        - in: query
          name: page
          type: integer
          description: ページ数(pagination時)
          default: 1
        - in: query
          name: perPage
          type: integer
          description: 件数
          default: 10
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PostList'

  /posts/feed/{userId}:
    get:
      tags:
        - post
      summary: フォローしているユーザーの記事取得API
      description: userIdで指定されたユーザーがフォローしているユーザーの記事取得
      parameters:
        - in: path
          name: userId
          type: integer
          required: true
          description: ユーザーID
        - in: query
          name: page
          type: integer
          description: ページ数(pagination時)
          default: 1
        - in: query
          name: perPage
          type: integer
          description: 件数
          default: 30
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PostList'

  /posts/search:
    get:
      tags:
        - post
      summary: フリーワード検索
      description: |
        フリーワード対象を取得
        複数ワードで検索可能
        その場合、レスポンスは全てのワードに引っ掛かる物である事
        以下の順番で返る)
        ・タイトルにフリーワードが含まれているもの(更新日時順)
        ・本文にフリーワードが含まれているもの(更新日時順)
      parameters:
        - in: query
          name: q
          type: string
          description: |
            検索ワード
            複数の場合「+」で連結
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PostList'

  /movies:
    get:
      tags:
        - movie
      summary: 動画取得API
      description: パラメータで指定された条件で検索(組み合わせる事も可能)
      parameters:
        - in: query
          name: areaId
          type: integer
          description: |
            エリアID
            いずれか1つ以上必須
        - in: query
          name: subAreaId
          type: integer
          description: |
            サブエリアID
            いずれか1つ以上必須
        - in: query
          name: subSubAreaId
          type: integer
          description: |
            サブサブエリアID
            いずれか1つ以上必須
        - in: query
          name: touristSpotId
          type: integer
          description: |
            観光スポットID
            いずれか1つ以上必須
        - in: query
          name: userId
          type: integer
          description: |
            ユーザーID
            いずれか1つ以上必須
        - $ref: '#/parameters/SortBy'
        - in: query
          name: page
          type: integer
          description: ページ数(pagination時)
          default: 1
        - in: query
          name: perPage
          type: integer
          description: 件数
          default: 10
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MovieList'

  /movies/search:
    get:
      tags:
        - movie
      summary: フリーワード検索
      description: |
        フリーワード対象を取得
        複数ワードで検索可能
        その場合、レスポンスは全てのワードに引っ掛かる物である事
        以下の順番で返る)
        ・タイトルにフリーワードが含まれているもの(更新日時順)
      parameters:
        - in: query
          name: q
          type: string
          description: |
            検索ワード
            複数の場合「+」で連結
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MovieList'

  /tourist_spots:
    get:
      tags:
        - tourist_spot
      summary: 観光スポット取得API
      description: パラメータで指定された条件で検索(組み合わせる事も可能)
      parameters:
        - in: query
          name: areaId
          type: integer
          description: |
            エリアID
            いずれか1つ以上必須
        - in: query
          name: subAreaId
          type: integer
          description: |
            サブエリアID
            いずれか1つ以上必須
        - in: query
          name: subSubAreaId
          type: integer
          description: |
            サブサブエリアID
            いずれか1つ以上必須
        - in: query
          name: spotCategoryId
          type: integer
          description: |
            観光スポットカテゴリID
            いずれか1つ以上必須
        - in: query
          name: excludeSpotId
          type: integer
          description: |
            除外するスポットID
        - $ref: '#/parameters/SortBy'
        - in: query
          name: limit
          type: integer
          description: |
            取得件数
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SpotList'

  /tourist_spots/{touristSpotId}:
    get:
      tags:
        - tourist_spot
      summary: 観光スポット詳細取得API
      description: 観光スポット詳細取得
      parameters:
        - in: path
          name: touristSpotId
          type: integer
          required: true
          description: |
            観光スポットID
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Spot'

  /tourist_spots/{touristSpotId}/recommend/{spotCategoryId}:
    get:
      tags:
        - tourist_spot
      summary: 周辺おすすめスポット取得API
      description: touristSpotIdから周辺おすすめスポット取得
      parameters:
        - in: path
          name: touristSpotId
          type: integer
          required: true
          description: |
            観光スポットID
        - in: path
          name: spotCategoryId
          type: integer
          required: true
          description: |
            観光スポットカテゴリID
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SpotList'

  /hashtag/recommend:
    get:
      tags:
        - hashtag
      summary: ハッシュタグ取得API
      description: 投稿数が多い順でハッシュタグ取得
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/HashTagList'

  /search/suggestions:
    get:
      tags:
        - search
      summary: 検索候補取得API
      description: |
        検索候補を以下のリストから取得
        レスポンスは以下の順番で返る
            ・エリア　　　　
            ・サブエリア
            ・サブサブエリア
            ・観光スポット　
            ・ハッシュタグ
            ・ユーザー
      parameters:
        - in: query
          name: q
          type: string
          description: |
            検索ワード
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SearchSuggestions'

definitions:
  UserRequest:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
        format: email
      birthdate:
        type: string
        format: date
      gender:
        type: string
        enum: [male, female]
      profile:
        type: string
      iconUuid:
        type: string
        description: S3アップロードAPIから返却されたUUIDを指定
      pinnedPostId:
        type: integer
        description: 一番上に表示される記事
      interests:
        type: array
        items:
          type: integer
  User:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
        format: email
      birthdate:
        type: string
        format: date
      gender:
        type: string
        enum: [male, female]
      profile:
        type: string
      header:
        type: string
        format: url
        description: ヘッダ画像。userIDから一意に定まる
      icon:
        type: string
        format: url
        description: アイコン。userIDから一意に定まる
      pinnedPostId:
        type: integer
        description: 一番上に表示される記事
      interests:
        type: array
        items:
          $ref: '#/definitions/Interest'
  UserSummary:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      icon:
        type: string
        format: url
        description: アイコン。userIDから一意に定まる
  ReviewRequest:
    type: object
    description: |
      spot_idかinn_idのどちらかは必ず入っていないといけない
    properties:
      spotId:
        type: integer
      innId:
        type: integer
      score:
        type: integer
      body:
        type: string
      mediaUuids:
        type: array
        items:
          type: string
          description: アップロードファイルのUUID
  Review:
    type: object
    properties:
      spotId:
        type: integer
      InnId:
        type: integer
      score:
        type: integer
      body:
        type: string
      favoriteCount:
        type: integer
      media:
        type: array
        items:
          $ref: '#/definitions/Media'
  Media:
    type: object
    properties:
      uuid:
        type: string
      mime:
        type: string
        format: mime
      url:
        type: string
        format: url
  ReviewComment:
    type: object
    properties:
      user:
        $ref: '#/definitions/UserSummary'
      body:
        type: string
      createdAt:
        type: string
        format: date-time
  Interest:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  ReviewCommentRequest:
    type: object
    properties:
      body:
        type: string
  Rectangle:
    type: object
    properties:
      LatNE:
        type: number
        format: double
      LngNE:
        type: number
        format: double
      LatSW:
        type: number
        format: double
      LngSW:
        type: number
        format: double
    required: [LatNE, LngNE, LatSW, LngSW]
  Inn:
    type: object
    properties:
      ID:
        type: integer
      Name:
        type: string
      Descriptioin:
        type: string
      URL:
        type: string
      BrandID:
        type: integer
      Thumbnail:
        type: string
      Latitude:
        type: number
        format: double
      Longitude:
        type: number
        format: double
      CountryCode:
        type: string
      Address:
        type: string
      PostCode:
        type: string
      Phone:
        type: string
      Access:
        type: string
      StayDaysMin:
        type: integer
      StayDaysMax:
        type: integer
      CheckInTime:
        type: string
      CheckOutTime:
        type: string
      RoomCount:
        type: integer
      BedCount:
        type: integer
      Score:
        type: number
        format: double
      ReviewCount:
        type: integer
      MinPrice:
        type: number
        format: double
      MaxPrice:
        type: number
        format: double
      InnTypes:
        type: array
        items:
          $ref: '#/definitions/InnType'
      RoomTypes:
        type: array
        items:
          $ref: '#/definitions/RoomType'
      AvailableCards:
        type: array
        items:
          $ref: '#/definitions/Card'
      TrueTags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      FalseTags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      BookingComURL:
        type: string
  PlanResponse:
    type: object
    properties:
      InnID:
        type: integer
        format: int64
      Count:
        type: integer
        description: 全プラン数
      OTAs:
        type: array
        items:
          "$ref": "#/definitions/OTAPlan"
  OTAPlan:
    type: object
    properties:
      Name:
        type: string
        description: OTA名
      Count:
        type: integer
        description: このOTAに含まれるプラン数
      Plans:
        type: array
        items:
          "$ref":  "#/definitions/Plan"
  Plan:
    type: object
    properties:
      Name:
        type: string
      BreckfastIncluded:
        type: boolean
        description: 朝食を含むかどうか
      Price:
        type: integer
      URL:
        type: string
        format: url
  InnType:
    type: object
    properties:
      ID:
        type: integer
        format: int64
      Name:
        type: string
      URL:
        type: string
  RoomType:
    type: object
    properties:
      ID:
        type: integer
        format: int64
      Name:
        type: string
  Card:
    type: object
    properties:
      ID:
        type: integer
        format: int64
      Name:
        type: string
  Tag:
    type: object
    properties:
      ID:
        type: integer
        format: int64
      Name:
        type: string
      URL:
        type: string

  PostList:
    type: array
    items:
      "$ref": "#/definitions/Post"

  Post:
    type: object
    properties:
      id:
        type: integer
        description: 記事ID
        example: 1
      thumbnail:
        type: string
        description: サムネイルURL
        example: http://example.com/img/1
      areaCategories:
        type: array
        items:
          type: string
          description: エリアカテゴリ
      themeCategories:
        type: array
        items:
          type: string
          description: テーマカテゴリ
      title:
        type: string
        description: 記事タイトル
        example: 埼玉の春を満喫♪
      creatorThumbnail:
        type: string
        description: クリエイターサムネイルURL
        example: http://example.com/img/1
      creatorName:
        type: string
        description: クリエイター名
        example: Hiroko
      likeCount:
        type: integer
        description: いいね数
        example: 3
      updatedAt:
        type: string
        description: 最終更新日時, ISO 8601形式
        example: 2020-01-01T13:16+09:00

  MovieList:
    type: array
    items:
      "$ref": "#/definitions/Movie"

  Movie:
    type: object
    properties:
      id:
        type: integer
        description: 動画ID
        example: 1
      thumbnail:
        type: string
        description: サムネイルURL
        example: http://example.com/img/1
      areaCategories:
        type: array
        items:
          type: string
          description: エリアカテゴリ
      themeCategories:
        type: array
        items:
          type: string
          description: テーマカテゴリ
      theme:
        type: string
        description: テーマカテゴリ
        example: 絶景
      title:
        type: string
        description: 動画タイトル
        example: 埼玉の春を満喫♪

  SpotList:
    type: array
    items:
      "$ref": "#/definitions/Spot"

  Spot:
    type: object
    properties:
      id:
        type: integer
        description: スポットID
        example: 1
      name:
        type: string
        description: スポット名
        example: 絶景
      thumbnail:
        type: string
        description: サムネイルURL
        example: http://example.com/img/1
      url:
        type: string
        description: スポットURL
        example: http://example.com/spot/1

  HashTagList:
    type: array
    items:
      "$ref": "#/definitions/HashTag"

  HashTag:
    type: object
    properties:
      id:
        type: integer
        description: ハッシュタグID
        example: 1
      name:
        type: string
        description: ハッシュタグ名
        example: 春に行きたい
      url:
        type: string
        description: URL
        example: http://example.com/img/1

  SearchSuggestions:
    type: array
    items:
      "$ref": "#/definitions/SearchSuggestion"

  SearchSuggestion:
    type: object
    properties:
      id:
        type: integer
        description: ハッシュタグID
        example: 1
      type:
        type: string
        description: 候補タイプ(enum)
        example: AREA
        enum:
          - AREA
          - SUBAREA
          - SUBSUBAREA
          - SPOT
          - HASHTAG
          - USER
      name:
        type: string
        description: 候補名
        example: 渋谷
      url:
        type: string
        description: URL
        example: /area/1

  Error:
    type: object
    properties:
      Message:
        type: string

parameters:

  SortBy:
    name: sortBy
    type: string
    in: query
    description: |
      ソート:
        * RANKING - 人気順
        * NEW - 新着順順
    enum:
      - RANKING
      - NEW