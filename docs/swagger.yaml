openapi: 3.0.0
info:
  title: stayway-media-api
  version: 1.0.0
paths:
  /users:
    post:
      tags:
        - user
      summary: ユーザー登録
      requestBody:
        $ref: "#/components/requestBodies/UserRegisterRequest"
      responses:
        "200":
          description: 成功
        "400":
          description: バリデーションエラーまたは既に存在するユーザー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - iDPCognito: []
    put:
      tags:
        - user
      summary: プロフィール更新
      description: |
        ユーザープロフィール更新
        アイコン、ヘッダ画像はフロント側でS3にアップロードし、UUIDを送信する。
        そのUUIDからアップロードされた画像を特定し、S3上の/users/icon/${userID}に移動する。
      requestBody:
        $ref: "#/components/requestBodies/UserUpdateRequest"
      responses:
        "200":
          description: 成功
        "400":
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - iDPCognito: []
    get:
      tags:
        - user
      summary: プロフィール取得
      description: |
        ログインしているユーザーのプロフィール取得
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - iDPCognito: []
  /users/uid/{uid}:
    get:
      tags:
        - user
      summary: プロフィール取得
      description: |
        ユーザープロフィール取得
      parameters:
        - in: path
          name: uid
          required: true
          description: |
            uid
          schema:
            type: string
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/id/{id}:
    get:
      tags:
        - user
      summary: プロフィール取得
      description: |
        ユーザープロフィール取得
      parameters:
        - in: path
          name: id
          required: true
          description: |
            id
          schema:
            type: integer
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/code/{code}:
    get:
      tags:
        - user
      summary: プロフィール取得
      description: |
        ユーザープロフィール取得
      parameters:
        - in: path
          name: code
          required: true
          description: |
            migration_code
          schema:
            type: string
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/recommend/follow:
    get:
      tags:
        - user
      summary: フォローおすすめユーザー一覧
      security:
        - iDPCognito: []
      parameters:
        - in: query
          name: interestId
          required: true
          description: |
            interestId
            複数指定可能
          schema:
            type: integer
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSummaryList"
  /users/ranking:
    get:
      tags:
        - user
      summary: ユーザーランキング取得
      security:
        - iDPCognito: []
      parameters:
        - in: query
          name: areaId
          description: |
            エリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: subAreaId
          description: |
            サブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: subSubAreaId
          description: |
            サブサブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - $ref: "#/components/parameters/UserSortBy"
        - in: query
          name: fromDate
          description: 記事や投稿写真を絞る開始日 (例)2019-01-01
          schema:
            type: string
            format: date
        - in: query
          name: toDate
          description: 記事や投稿写真を絞る終了日 (例)2019-01-31
          schema:
            type: string
            format: date
        - in: query
          name: page
          required: false
          description: 何ページ目
          schema:
            type: integer
            default: 1
        - in: query
          name: perPage
          required: false
          description: ページ当たり取得件数
          schema:
            type: integer
            default: 30
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RankingUserList"
  /users/{id}/follow:
    post:
      tags:
        - user
      summary: ユーザーフォロー
      parameters:
        - in: path
          name: id
          required: true
          description: UserId
          schema:
            type: integer
      responses:
        '200':
          description: ok
      security:
        - iDPCognito: []
    delete:
      tags:
        - user
      summary: ユーザーアンフォロー
      parameters:
        - in: path
          name: id
          required: true
          description: UserId
          schema:
            type: integer
      responses:
        '200':
          description: ok
      security:
        - iDPCognito: []
  /users/{id}/following:
    get:
      tags:
        - user
      summary: フォローユーザー取得
      description: optional auth
      parameters:
        - in: path
          name: id
          required: true
          description: UserId
          schema:
            type: integer
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSummaryWithIsFollowList"
  /users/{id}/followed:
    get:
      tags:
        - user
      summary: フォローワーユーザー取得
      parameters:
        - in: path
          name: id
          required: true
          description: UserId
          schema:
            type: integer
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSummaryWithIsFollowList"
  /users/favorite/reviews/{id}:
    get:
      tags:
        - user
      summary: レビューにfavしているユーザー一覧取得API
      parameters:
        - in: path
          name: id
          required: true
          description: reviewId
          schema:
            type: integer
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSummaryList"
  /users/favorite/posts/{id}:
    get:
      tags:
        - user
      summary: 記事にfavしているユーザー一覧取得API
      parameters:
        - in: path
          name: id
          required: true
          description: reviewId
          schema:
            type: integer
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSummaryList"
  /notice:
    get:
      security:
        - iDPCognito: []
      tags:
        - notice
      summary: 通知取得API
      description: 直近100件の通知を取得する
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoticeList"
  /s3:
    post:
      security:
        - iDPCognito: []
      tags:
        - s3
      summary: S3アップロードに使用する署名付きURLを生成
      description: |
        フロントはこれを使用してS3にファイルをアップロードし、ファイル添付系のAPIでUUIDを渡す。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                contentType:
                  type: string
                  format: mime
        required: true
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                  url:
                    type: string
                    description: PutObjectに使用する署名付きURL
  /reviews:
    get:
      tags:
        - review
      summary: レビュー検索
      description: |
        フリーワード検索可能
        複数ワードで検索可能
        その場合、レスポンスは全てのワードに引っ掛かる物である事
        以下の順番で返る)
        ・本文にフリーワードが含めれているものを返す(作成日時順)
      parameters:
        - in: query
          name: userId
          description: 指定したユーザーが投稿したレビューを取得する
          schema:
            type: integer
        - in: query
          name: innId
          description: innに紐づくレビューを取得する
          schema:
            type: integer
        - in: query
          name: touristSpotId
          description: spotに紐づくレビューを取得する
          schema:
            type: integer
        - in: query
          name: areaId
          description: |
            エリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: subAreaId
          description: |
            サブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: subSubAreaId
          description: |
            サブサブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: metasearchAreaId
          description: |
            検索サイトエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: metasearchSubAreaId
          description: |
            検索サイトサブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: metasearchSubSubAreaId
          description: |
            検索サイトサブサブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: hashtag
          description: hashtagに紐づくレビューを取得する
          schema:
            type: string
        - in: query
          name: q
          description: |
            検索ワード
          schema:
            type: string
        - $ref: "#/components/parameters/ReviewSortBy"
        - in: query
          name: excludeId
          description: |
            除外するID
          schema:
            type: integer
        - in: query
          name: perPage
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumber:
                    type: integer
                    description: 検索総件数
                    example: 120
                  reviews:
                    $ref: "#/components/schemas/Review"
    post:
      tags:
        - review
      summary: レビュー投稿
      security:
        - iDPCognito: []
      requestBody:
        $ref: "#/components/requestBodies/ReviewRequest"
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "400":
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reviews/{id}:
    get:
      tags:
        - review
      summary: レビュー取得
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          required: true
          description: レビューID
          schema:
            type: integer
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "404":
          description: 存在しないレビュー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - review
      summary: レビュー更新
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          required: true
          description: レビューID
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/ReviewUpdateRequest"
      responses:
        "200":
          description: 成功
        "400":
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: 自分のものでない投稿を更新しようとした時
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: 存在しないレビュー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - review
      summary: レビュー削除
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          required: true
          description: レビューID
          schema:
            type: integer
      responses:
        "200":
          description: 成功
        "400":
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: 自分のものでない投稿を更新しようとした時
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: 存在しないレビュー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reviews/{id}/comment:
    get:
      tags:
        - review
      summary: レビューのコメントを取得する
      parameters:
        - in: path
          name: id
          required: true
          description: レビューID
          schema:
            type: integer
        - in: query
          name: perPage
          description: 取得件数
          schema:
            type: integer
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewComment"
        "404":
          description: 存在しないレビュー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - review
      summary: レビューにコメントを投稿する
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          required: true
          description: レビューID
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewCommentRequest"
        required: true
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewComment"
        "400":
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: 存在しないレビュー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reviews/comment/{id}/reply:
    get:
      tags:
        - review
      summary: レビューのコメントに対するリプライ取得
      parameters:
        - in: path
          name: id
          required: true
          description: コメントID
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewCommentReplyList"
    post:
      tags:
        - review
      summary: レビューのコメントに対するリプライ投稿
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          required: true
          description: コメントID
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewCommentRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewCommentReply"
  /reviews/comment/{id}/reply/{replyId}:
    delete:
      tags:
        - review
      summary: レビューのコメントに対するリプライ削除API
      description: |
        replyIdに対応するリプライを削除
      parameters:
        - in: path
          name: id
          required: true
          description: コメントID
          schema:
            type: integer
        - in: path
          name: replyId
          required: true
          description: リプライID
          schema:
            type: integer
      responses:
        "200":
          description: "成功"
        "404":
          description: 存在しないリプライ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reviews/comment/{commentId}/reply/{replyId}/favorite:
    put:
      tags:
        - review
      summary: レビューのコメントに対するリプライ投稿のいいねAPI
      description: |
        idに対応するリプライをいいねするAPI
      parameters:
        - in: path
          name: commentId
          required: true
          description: コメントID
          schema:
            type: integer
        - in: path
          name: replyId
          required: true
          description: リプライID
          schema:
            type: integer
      responses:
        "204":
          description: "成功"
        "404":
          description: 存在しないリプライ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - review
      summary: レビューのコメントに対するリプライ投稿のいいねAPI
      description: |
        idに対応するリプライをいいねするAPI
      parameters:
        - in: path
          name: commentId
          required: true
          description: コメントID
          schema:
            type: integer
        - in: path
          name: replyId
          required: true
          description: リプライID
          schema:
            type: integer
      responses:
        "204":
          description: "成功"
        "404":
          description: 存在しないリプライ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /reviews/{id}/favorite:
    put:
      tags:
        - review
      summary: レビューをfavする
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: 成功
        "404":
          description: 存在しないレビュー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - review
      summary: レビューをunfavする
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: 成功
        "404":
          description: 存在しないレビュー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reviews/comment/{id}/favorite:
    put:
      tags:
        - review
      summary: レビューのコメントをfav
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          required: true
          description: コメントID
          schema:
            type: integer
      responses:
        "204":
          description: 成功
        "404":
          description: 存在しないレビュー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - review
      summary: レビューのコメントをunfav
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          required: true
          description: コメントID
          schema:
            type: integer
      responses:
        "204":
          description: 成功
        "404":
          description: 存在しないレビュー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{userId}/feed/reviews:
    get:
      tags:
        - review
      summary: フォローしているユーザー又はハッシュタグのレビュー取得API
      description: userIdで指定されたユーザーがフォローしているユーザー又はハッシュタグのレビュー取得
      parameters:
        - in: path
          name: userId
          required: true
          description: ユーザーID
          schema:
            type: integer
        - in: query
          name: page
          description: ページ数(pagination時)
          schema:
            type: integer
            default: 1
        - in: query
          name: perPage
          description: 件数
          schema:
            type: integer
            default: 30
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumber:
                    type: integer
                    description: 検索総件数
                    example: 120
                  reviews:
                    $ref: "#/components/schemas/Review"
  /users/{userId}/favorite/reviews:
    get:
      tags:
        - review
      summary: ユーザーがいいねしたレビュー取得API
      description: userIdで指定されたユーザーがいいねしたレビュー取得
      parameters:
        - in: path
          name: userId
          required: true
          description: ユーザーID
          schema:
            type: integer
        - in: query
          name: page
          description: ページ数(pagination時)
          schema:
            type: integer
            default: 1
        - in: query
          name: perPage
          description: 件数
          schema:
            type: integer
            default: 30
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumber:
                    type: integer
                    description: 検索総件数
                    example: 120
                  reviews:
                    $ref: "#/components/schemas/Review"
  /posts:
    get:
      tags:
        - post
      summary: 記事取得API
      description: |
        パラメータで指定された条件で検索(組み合わせる事も可能)
        フリーワード対象を取得
        複数ワードで検索可能
        その場合、レスポンスは全てのワードに引っ掛かる物である事
        以下の順番で返る)
        ・タイトルにフリーワードが含まれているもの(更新日時順)
        ・本文にフリーワードが含まれているもの(更新日時順)
      parameters:
        - in: query
          name: userId
          description: |
            ユーザーID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: areaId
          description: |
            エリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: subAreaId
          description: |
            サブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: subSubAreaId
          description: |
            サブサブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: childAreaId
          description: |
            AreaID
            親カテゴリに紐づく記事を返す
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: childSubAreaId
          description: |
            SubAreaID
            親カテゴリに紐づく記事を返す
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: childSubSubAreaId
          description: |
            SubSubAreaID
            親カテゴリに紐づく記事を返す
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: metasearchAreaId
          description: |
            検索サイトエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: metasearchSubAreaId
          description: |
            検索サイトサブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: metasearchSubSubAreaId
          description: |
            検索サイトサブサブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: themeId
          description: |
            テーマID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: innTypeId
          description: |
            宿タイプID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: innDiscerningType
          description: |
            宿こだわり条件ID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: hashTag
          description: |
            ハッシュタグ
            いずれか1つ以上必須
          schema:
            type: string
        - in: query
          name: cfProjectId
          description: |
            CfProjectId
            いずれか1つ以上必須
          schema:
            type: string
        - $ref: "#/components/parameters/SortBy"
        - in: query
          name: q
          description: |
            検索ワード
          schema:
            type: string
        - in: query
          name: page
          description: ページ数(pagination時)
          schema:
            type: integer
            default: 1
        - in: query
          name: perPage
          description: 件数
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumber:
                    type: integer
                    description: 検索総件数
                    example: 120
                  posts:
                    $ref: "#/components/schemas/PostWithCategoryDetailList"
  /posts/{id}:
    get:
      tags:
        - post
      summary: 記事取得API
      parameters:
        - in: path
          name: id
          required: true
          description: 記事ID
          schema:
            type: integer
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostShow"
        "404":
          description: 存在しないレビュー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /posts/{slug}/slug:
    get:
      tags:
        - post
      summary: スラッグで記事取得API
      parameters:
        - in: path
          name: slug
          required: true
          description: 記事スラッグ
          schema:
            type: string
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostShow"
        "404":
          description: 存在しないレビュー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /posts/{id}/favorite:
    put:
      tags:
        - post
      summary: 記事をfavする
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: 成功
        "404":
          description: 存在しない記事
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - post
      summary: 記事をunfavする
      security:
        - iDPCognito: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: 成功
        "404":
          description: 存在しない記事
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/feed/posts:
    get:
      tags:
        - post
      summary: フォローしているユーザー又はハッシュタグの記事取得API
      description: userIdで指定されたユーザーがフォローしているユーザー又はハッシュタグの記事取得
      parameters:
        - in: path
          name: userId
          required: true
          description: ユーザーID
          schema:
            type: integer
        - in: query
          name: page
          description: ページ数(pagination時)
          schema:
            type: integer
            default: 1
        - in: query
          name: perPage
          description: 件数
          schema:
            type: integer
            default: 30
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumber:
                    type: integer
                    description: 検索総件数
                    example: 120
                  posts:
                    $ref: "#/components/schemas/PostWithCategoryDetailList"
  /users/{userId}/favorite/posts:
    get:
      tags:
        - post
      summary: ユーザーがいいねした記事取得API
      description: userIdで指定されたユーザーがいいねした記事取得
      parameters:
        - in: path
          name: userId
          required: true
          description: ユーザーID
          schema:
            type: integer
        - in: query
          name: page
          description: ページ数(pagination時)
          schema:
            type: integer
            default: 1
        - in: query
          name: perPage
          description: 件数
          schema:
            type: integer
            default: 30
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumber:
                    type: integer
                    description: 検索総件数
                    example: 120
                  posts:
                    $ref: "#/components/schemas/PostWithCategoryDetailList"
  /feature_posts:
    get:
      tags:
        - feature_post
      summary: 特集記事一覧取得API
      description: |
        特集記事一覧取得
        更新日時順
      parameters:
        - in: query
          name: page
          description: ページ数(pagination時)
          schema:
            type: integer
            default: 1
        - in: query
          name: perPage
          description: 件数
          schema:
            type: integer
            default: 30
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumber:
                    type: integer
                    description: 検索総件数
                    example: 120
                  featurePosts:
                    $ref: "#/components/schemas/FeaturePostList"
  "/feature_posts/{id}":
    get:
      tags:
        - feature_post
      summary: 特集記事詳細取得API
      description: 特集記事詳細
      parameters:
        - in: path
          name: id
          required: true
          description: 特集記事ID
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShowFeaturePost"
  /vlogs:
    get:
      tags:
        - vlog
      summary: 動画取得API
      description: |
        パラメータで指定された条件で検索(組み合わせる事も可能)
        フリーワード対象を取得
        複数ワードで検索可能
        その場合、レスポンスは全てのワードに引っ掛かる物である事
        以下の順番で返る)
        ・タイトルにフリーワードが含まれているもの(更新日時順)
      parameters:
        - in: query
          name: areaId
          description: |
            エリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: subAreaId
          description: |
            サブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: subSubAreaId
          description: |
            サブサブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: touristSpotId
          description: |
            観光スポットID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: userId
          description: |
            ユーザーID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: q
          description: |
            検索ワード
          schema:
            type: string
        - $ref: "#/components/parameters/SortBy"
        - in: query
          name: page
          description: ページ数(pagination時)
          schema:
            type: integer
            default: 1
        - in: query
          name: perPage
          description: 件数
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumber:
                    type: integer
                    description: 検索総件数
                    example: 120
                  vlogs:
                    $ref: "#/components/schemas/VlogList"
  /vlogs/{id}:
    get:
      tags:
        - vlog
      summary: 動画取得API
      parameters:
        - in: path
          name: id
          required: true
          description: |
            vlogID
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VlogShow"
  /vlogs/{id}/favorite:
    put:
      tags:
        - vlog
      summary: 動画に対するいいねAPI
      description: |
        idに対応する動画に対するいいねAPI
      parameters:
        - in: path
          name: id
          required: true
          description: vlogID
          schema:
            type: integer
      responses:
        "204":
          description: "成功"
        "404":
          description: 存在しないVlog
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - vlog
      summary: 動画に対するいいね削除API
      parameters:
        - in: path
          name: id
          required: true
          description: vlogID
          schema:
            type: integer
      responses:
        "204":
          description: "成功"
        "404":
          description: 存在しないVlog
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /comics:
    get:
      tags:
        - comic
      summary: 漫画一覧取得API
      description: |
        漫画一覧取得
        更新日時降順
      parameters:
        - in: query
          name: page
          description: ページ数(pagination時)
          schema:
            type: integer
            default: 1
        - in: query
          name: perPage
          description: 件数
          schema:
            type: integer
            default: 10
        - in: query
          name: excludeId
          description: |
            除外するID
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumber:
                    type: integer
                    description: 検索総件数
                    example: 120
                  posts:
                    $ref: "#/components/schemas/ComicList"
  "/comics/{id}":
    get:
      tags:
        - comic
      summary: 漫画詳細取得API
      description: 漫画詳細取得
      parameters:
        - in: path
          name: id
          required: true
          description: 漫画ID
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComicShow"
  /comics/{id}/favorite:
    put:
      tags:
        - comic
      summary: 漫画に対するいいねAPI
      description: |
        idに対応する漫画に対するいいねAPI
      parameters:
        - in: path
          name: id
          required: true
          description: 漫画ID
          schema:
            type: integer
      responses:
        "204":
          description: "成功"
        "404":
          description: 存在しない漫画
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - comic
      summary: 漫画に対するいいね削除API
      description: |
        idに対応する漫画に対するいいね削除API
      parameters:
        - in: path
          name: id
          required: true
          description: 漫画ID
          schema:
            type: integer
      responses:
        "204":
          description: "成功"
        "404":
          description: 存在しない漫画
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tourist_spots:
    get:
      tags:
        - tourist_spot
      summary: 観光スポット取得API
      description: パラメータで指定された条件で検索(組み合わせる事も可能)
      parameters:
        - in: query
          name: areaId
          description: |
            エリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: subAreaId
          description: |
            サブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: subSubAreaId
          description: |
            サブサブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: spotCategoryId
          description: |
            観光スポットカテゴリID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: excludeSpotId
          description: |
            除外するスポットID
          schema:
            type: integer
        - in: query
          name: page
          description: ページ数(pagination時)
          schema:
            type: integer
            default: 1
        - in: query
          name: perPage
          description: 件数
          schema:
            type: integer
            default: 30
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumber:
                    type: integer
                    description: 検索総件数
                    example: 120
                  touristSpots:
                    $ref: "#/components/schemas/TouristSpotList"
  "/tourist_spots/{touristSpotId}":
    get:
      tags:
        - tourist_spot
      summary: 観光スポット詳細取得API
      description: 観光スポット詳細取得
      parameters:
        - in: path
          name: touristSpotId
          required: true
          description: |
            観光スポットID
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TouristSpot"
  /tourist_spots/recommend:
    get:
      tags:
        - tourist_spot
      summary: 周辺おすすめスポット取得API
      description: 周辺おすすめスポット取得
      parameters:
        - in: query
          name: touristSpotId
          description: |
            観光スポットID
          schema:
            type: integer
        - in: query
          name: spotCategoryId
          description: |
            観光スポットカテゴリID
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumber:
                    type: integer
                    description: 検索総件数
                    example: 120
                  touristSpots:
                    $ref: "#/components/schemas/TouristSpotList"
  /hashtags/recommend:
    get:
      tags:
        - hashtag
      summary: ハッシュタグ取得API
      description: 投稿数が多い順でハッシュタグ取得
      parameters:
        - in: query
          name: areaId
          description: |
            エリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: subAreaId
          description: |
            サブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: subSubAreaId
          description: |
            サブサブエリアID
            いずれか1つ以上必須
          schema:
            type: integer
        - in: query
          name: perPage
          description: 件数
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HashtagList"
  /hashtags/{id}/follow:
    post:
      tags:
        - hashtag
      summary: ハッシュタグフォロー
      parameters:
        - in: path
          name: id
          required: true
          description: HashtagId
          schema:
            type: integer
      responses:
        '200':
          description: ok
      security:
        - iDPCognito: []
    delete:
      tags:
        - hashtag
      summary: ハッシュタグアンフォロー
      parameters:
        - in: path
          name: id
          required: true
          description: hashtagId
          schema:
            type: integer
      responses:
        '200':
          description: ok
      security:
        - iDPCognito: []
  /search/suggestions:
    get:
      tags:
        - search
      summary: 検索候補取得API
      description: |
        検索候補を以下のリストから取得
        レスポンスは以下の順番で返る
            ・エリア　　　　
            ・サブエリア
            ・サブサブエリア
            ・観光スポット　
            ・ハッシュタグ
            ・ユーザー
      parameters:
        - in: query
          name: q
          description: |
            検索ワード
          schema:
            type: string
        - $ref: "#/components/parameters/SearchSuggestion"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSuggestions"
  /categories/{slug}/slug:
    get:
      tags:
        - category
      summary: スラッグでカテゴリ取得API
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: スラッグ
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryForSlug"
  /areas:
    get:
      tags:
        - area
      summary: エリア一覧取得API
      description: エリア一覧取得
      parameters:
        - $ref: "#/components/parameters/AreaGroup"
        - in: query
          name: excludeId
          description: |
            除外するID
          schema:
            type: integer
        - in: query
          name: perPage
          description: 件数
          schema:
            type: integer
            default: 1000
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AreaCategoryList"
  /areas/{id}:
    get:
      tags:
        - area
      summary: IDに該当するエリアを取得するAPI
      description: IDに該当するエリア取得
      parameters:
        - in: path
          name: id
          description: 検索するエリアID
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AreaCategoryDetail"
  /sub_areas:
    get:
      tags:
        - sub_area
      summary: 親IDに紐づくサブエリア一覧取得API
      description: 親IDに紐づくサブエリア一覧取得
      parameters:
        - in: query
          name: areaId
          required: true
          description: |
            親カテゴリID
          schema:
            type: integer
        - in: query
          name: themeId
          description: |
            テーマID
          schema:
            type: integer
        - in: query
          name: excludeId
          description: |
            除外するID
          schema:
            type: integer
        - in: query
          name: perPage
          description: 件数
          schema:
            type: integer
            default: 1000
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AreaCategoryList"
  /sub_areas/{id}:
    get:
      tags:
        - sub_area
      summary: IDに該当するサブエリアを取得するAPI
      description: IDに該当するサブエリア取得
      parameters:
        - in: path
          name: id
          description: 検索するサブエリアID
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AreaCategoryDetail"
  /sub_sub_areas:
    get:
      tags:
        - sub_sub_area
      summary: 親IDに紐づくサブサブエリア一覧取得API
      description: 親IDに紐づくサブサブエリア一覧取得
      parameters:
        - in: query
          name: subAreaId
          required: true
          description: |
            親カテゴリID
          schema:
            type: integer
        - in: query
          name: themeId
          description: |
            テーマID
          schema:
            type: integer
        - in: query
          name: excludeId
          description: |
            除外するID
          schema:
            type: integer
        - in: query
          name: perPage
          description: 件数
          schema:
            type: integer
            default: 1000
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AreaCategoryList"
  /sub_sub_areas/{id}:
    get:
      tags:
        - sub_sub_area
      summary: IDに該当するサブサブエリアを取得するAPI
      description: IDに該当するサブサブエリア取得
      parameters:
        - in: path
          name: id
          required: true
          description: 検索するサブサブエリアID
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AreaCategoryDetail"
  /interests:
    get:
      tags:
        - interest
      parameters:
        - $ref: "#/components/parameters/InterestGroup"
      summary: ユーザー興味項目検索API
      description: ユーザー興味項目検索
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InterestList"
  /inns:
    get:
      tags:
        - inn
      summary: 宿検索API
      description: metasearch側の/innsのAPIをラップ
      parameters:
        - in: query
          name: areaId
          description: |
            エリアID
          schema:
            type: integer
        - in: query
          name: subAreaId
          description: |
            サブエリアID
          schema:
            type: integer
        - in: query
          name: subSubAreaId
          description: |
            サブサブエリアID
          schema:
            type: integer
        - in: query
          name: touristSpotId
          description: |
            観光スポットID
          schema:
            type: integer
        - in: query
          name: page
          description: ページ数
          schema:
            type: integer
            default: 1
        - in: query
          name: perPage
          description: 件数
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InnList"
  /themes:
    get:
      tags:
        - theme
      summary: Theme取得API
      description: Area系パラメータIDに紐づく記事に紐づくThemeの一覧を取得する
      parameters:
        - name: excludeId
          in: query
          description: 除外するカテゴリーのID
          schema:
            type: integer
        - name: areaId
          in: query
          description: AreaのID
          schema:
            type: integer
        - name: subAreaId
          in: query
          description: SubAreaのID
          schema:
            type: integer
        - name: subSubAreaId
          in: query
          description: SubSubAreaのID
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThemeCategoryList"
  /sub_themes:
    get:
      tags:
        - sub_theme
      summary: SubTheme取得API
      description: Area系パラメータIDに紐づく記事に紐づくThemeの中からThemeIDに紐づくThemeをSubThemeとして取得する
      parameters:
        - name: themeId
          in: query
          schema:
            type: integer
        - name: excludeId
          in: query
          description: 除外するカテゴリーのID
          schema:
            type: integer
        - name: areaId
          in: query
          description: AreaのID
          schema:
            type: integer
        - name: subAreaId
          in: query
          description: SubAreaのID
          schema:
            type: integer
        - name: subSubAreaId
          in: query
          description: SubSubAreaのID
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThemeCategoryList"

  /payments/shipping:
    post:
      tags:
        - payment
      summary: 申込み情報登録
      description: |
        申込み情報登録は履歴を残す為に全て新規作成される。
      security:
        - iDPCognito: []
      requestBody:
        $ref: "#/components/requestBodies/ShippingAddressRequest"
      responses:
        "200":
          description: 成功
    get:
      tags:
        - payment
      summary: 申込み情報取得
      description: |
        最新の申込み情報登録を返却
      security:
        - iDPCognito: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShippingAddress"
  /payments/card:
    post:
      tags:
        - payment
      summary: カード登録
      description: |
        カード登録は１つのみ
      security:
        - iDPCognito: []
      requestBody:
        $ref: "#/components/requestBodies/CardRequest"
      responses:
        "200":
          description: 成功
    get:
      tags:
        - payment
      summary: カード取得
      security:
        - iDPCognito: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
  /payments/card/{id}:
    delete:
      tags:
        - payment
      summary: カード削除
      security:
        - iDPCognito: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
  /payments/charge:
    post:
      tags:
        - payment
      summary: 決済
      security:
        - iDPCognito: []
      requestBody:
        $ref: "#/components/requestBodies/PaymentRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaptureChargeResult"
  /payments/{id}/charge/refund:
    put:
      tags:
        - payment
      summary: 購入キャンセル
      description: |
        個数指定はできない
        返金可能な期限は売上作成より180日以内
        ＊返金が行われる
      requestBody:
        $ref: "#/components/requestBodies/RefundCaptureRequest"
      parameters:
        - name: id
          in: path
          required: true
          description: paymnetId
          schema:
            type: integer
      security:
        - iDPCognito: []
      responses:
        "204":
          description: nocontent
  /payments:
    get:
      tags:
        - payment
      summary: 購入一覧
      security:
        - iDPCognito: []
      parameters:
        - name: perPage
          in: query
          schema:
            type: integer
            default: 10
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: cfProjectId
          in: query
          schema:
            type: integer
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumber:
                    type: integer
                    description: 検索総件数
                    example: 120
                  payments:
                    $ref: "#/components/schemas/PaymentList"
  /payments/{id}/reserve:
    post:
      tags:
        - payment
      summary: 宿泊予約券予約リクエスト
      description: |
        購入した宿泊予約券を用いて予約
      parameters:
        - name: id
          in: path
          required: true
          description: paymnetId
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/CfReserveRequest"
      responses:
        "204":
          description: nocontent
  /projects:
    get:
      tags:
        - project
      summary: クラウドファンディングプロジェクト検索API
      parameters:
        - in: query
          name: areaId
          description: |
            エリアID
          schema:
            type: integer
        - in: query
          name: subAreaId
          description: |
            サブエリアID
          schema:
            type: integer
        - in: query
          name: subSubAreaId
          description: |
            サブサブエリアID
          schema:
            type: integer
        - in: query
          name: userId
          description: |
            Userのid
          schema:
            type: integer
        - in: query
          name: sortBy
          schema:
            $ref: "#/components/schemas/CfProjectSortBy"
          description: |
            New - 新着順
            LargeAmount - 支援金額の多い順
            Push - 達成金額70%以上
            Attention - 注目
        - name: perPage
          in: query
          schema:
            type: integer
            default: 10
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumber:
                    type: integer
                    description: 検索総件数
                    example: 120
                  cfProjects:
                    $ref: "#/components/schemas/CfProjectList"
  /projects/supported:
    get:
      tags:
        - project
      summary: 支援したクラウドファンディングプロジェクト一覧API
      parameters:
        - name: perPage
          in: query
          schema:
            type: integer
            default: 10
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumber:
                    type: integer
                    description: 検索総件数
                    example: 120
                  cfProjects:
                    $ref: "#/components/schemas/CfProjectList"
  /projects/{id}:
    get:
      tags:
        - project
      summary: クラウドファンディングプロジェクト取得API
      parameters:
        - in: path
          name: id
          description: |
            プロジェクトid
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CfProject"
  /projects/{id}/gift:
    get:
      tags:
        - project
      summary: クラウドファンディングプロジェクトギフト一覧API
      parameters:
        - in: path
          name: id
          description: |
            プロジェクトid
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CfReturnGiftList"
  /projects/{id}/comment:
    get:
      tags:
        - project
      summary: クラウドファンディング応援コメント
      parameters:
        - in: path
          name: id
          description: |
            プロジェクトID
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CfProjectSupportCommentList"
  /projects/{id}/favorite:
    put:
      tags:
        - project
      summary: クラウドファンディングfavAPI
      parameters:
        - in: path
          name: id
          description: |
            プロジェクトID
          schema:
            type: integer
          required: true
      responses:
        "204":
          description: ok
    delete:
      tags:
        - project
      summary: クラウドファンディングunfavAPI
      parameters:
        - in: path
          name: id
          description: |
            プロジェクトID
          schema:
            type: integer
          required: true
      responses:
        "204":
          description: ok
  /reports:
    post:
      tags:
        - report
      summary: メディア通報API
      description: |
        通報
      security:
        - iDPCognito: []
      requestBody:
        $ref: "#/components/requestBodies/ReportRequest"
      responses:
        "200":
          description: 成功
        "400":
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
servers:
  - url: http://localhost:5000/api/v1/tourism
  - url: https://stg-api.stayway.jp/api/v1/tourism
components:
  parameters:
    SortBy:
      name: sortBy
      in: query
      description: |
        ソート:
          * RANKING - 直近7日間のいいねランキング
          * NEW - 新着順順
          * RECOMMEND - 直近7日間のPVランキング(現状postのみで使用可)
      schema:
        type: string
        enum:
          - RANKING
          - NEW
        default: NEW
    ReviewSortBy:
      name: sortBy
      in: query
      description: |
        ソート:
          * RECOMMEND - 直近7日間のPVランキング
          * NEW - 新着順順
      schema:
        type: string
        enum:
          - RECOMMEND
          - NEW
        default: NEW
    UserSortBy:
      name: sortBy
      in: query
      description: |
        ソート:
          * RANKING - 直近7日間で、記事いいね＋投稿写真（Review)のいいね数が多いトラベラー
          * RECOMMEND - 直近7日間で、記事PV＋投稿写真のPV数が多いトラベラー
      schema:
        type: string
        enum:
          - RANKING
          - RECOMMEND
        default: RECOMMEND
    SearchSuggestion:
      name: type
      in: query
      description: |
        検索対象絞り込み
      schema:
        type: string
        enum:
          - Area
          - SubArea
          - SubSubArea
          - TouristSpot
          - Hashtag
          - User
    InterestGroup:
      name: interestGroup
      in: query
      description: |
        興味分野グループ絞り込み
        指定無しの場合は全て
      schema:
        type: string
        enum:
          - Undefined
          - Style
          - Scene
          - Gourmet
          - LifeStyle
          - Activity
          - Sport
    AreaGroup:
      name: areaGroup
      in: query
      description: |
        エリアグループ
      schema:
        type: string
        enum:
          - Undefined
          - Japan
          - World
        default: Undefined
  requestBodies:
    UserRegisterRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserRegisterRequest"
    UserUpdateRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserUpdateRequest"
      required: true
    ReviewRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReviewRequest"
      required: true
    ReviewUpdateRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReviewUpdateRequest"
      required: true
    ShippingAddressRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ShippingAddressRequest"
    CardRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CardRequest"
    PaymentRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PaymentListRequest"
    ReportRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReportRequest"
    CfReserveRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CfReserveRequest"
    RefundCaptureRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CfReturnGiftID"
  securitySchemes:
    iDPCognito:
      in: header
      name: Authorization
      type: apiKey
      description: CognitoIDPから取得するDToken
  schemas:
    createdAt:
      type: string
      format: date-time
      description: 公開日時, ISO 8601形式
      example: 2020-01-01T13:16+09:00
    updatedAt:
      type: string
      format: date-time
      description: 更新日時, DBのレコードとしての更新日時なので、子要素の更新が反映されない, ISO 8601形式
      example: 2020-01-01T13:16+09:00
    editedAt:
      type: string
      format: date-time
      description: 更新日時, ISO 8601形式
      example: 2020-01-01T13:16+09:00
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        birthdate:
          type: string
          format: date
        gender:
          type: string
          enum:
            - male
            - female
        profile:
          type: string
        iconUuid:
          type: string
          description: アイコンをs3投稿時に返却されるUUID
          example: "6a3e24ea-60ec-484b-b912-e854be261c95"
        headerUuid:
          type: string
          description: ヘッダーをs3投稿時に返却されるUUID
          example: "6a3e24ea-60ec-484b-b912-e854be261c95"
        pinnedPostId:
          type: integer
          description: 一番上に表示される記事
        url:
          type: string
          description: 任意のurl
          example: https://hoge.com
        facebookUrl:
          type: string
          description: facebookのurl
          example: https://facebook.com
        instagramUrl:
          type: string
          description: instagramのurl
          example: https://instagram.com
        twitterUrl:
          type: string
          description: twitterのurl
          example: https://twitter.com
        youtubeUrl:
          type: string
          description: youtubeのurl
          example: https://youtube.com
        livingArea:
          type: string
          description: 居住エリア
          example: 東北
        interests:
          type: array
          items:
            type: integer
    UserRegisterRequest:
      type: object
      properties:
        cognitoUserName:
          type: string
          description: cognito側のusername
          example: "sms_eyJhbGc"
        cognitoToken:
          type: string
          description: cognitoで認証して得られたJWT
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3NzcifQ.Gu9mozICWKVRA-32hPAIPNPWe-fNPCQbnV8MKt8vRag"
        migrationCode:
          type: string
          description: 先にwordpressで登録したユーザーがsign upする際に紐付けるためのキー
          example: "6a3e24ea-60ec-484b-b912-e854be261c95"
        name:
          type: string
          description: ユーザー名
          example: かな
        uid:
          type: string
          description: |
            ユーザーが決める一意なID
            半角英字のみ
            migrationCodeがある場合はWordpressから読み取るので指定しないこと
        email:
          type: string
          format: email
          description: email
        birthdate:
          type: string
          format: date
          description: 生年月日
        gender:
          type: string
          enum:
            - Male
            - Female
            - Undefined
          example: Male
        profile:
          type: string
          description: プロフィール文
          example: 香川出身24歳です！旅大好き！
        url:
          type: string
          description: ユーザーが自由に設定するURL
          format: url
          example: https://hoge.com
        facebookUrl:
          type: string
          description: facebookURL
          format: url
          example: https://facebook.com/
        instagramUrl:
          type: string
          description: instagramURL
          format: url
          example: https://instagram.com/
        twitterUrl:
          type: string
          description: twitterURL
          example: https://twitter.com/
        youtubeUrl:
          type: string
          description: youtubuURL
          example: https://youtube.com
        livingArea:
          type: string
          description: 居住エリア
          example: 東北
        interests:
          type: array
          items:
            type: integer
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        uid:
          type: string
          example: Yta
        name:
          type: string
          example: ひとみ
        email:
          type: string
          format: email
        birthdate:
          type: string
          format: date
        gender:
          type: string
          enum:
            - Male
            - Female
            - Undefined
        profile:
          type: string
          example: 初めまして、旅大好きです
        headerUrl:
          type: string
          format: url
          description: ヘッダ画像
        iconUrl:
          type: string
          format: url
          description: アイコン
        pinnedPostId:
          type: integer
          description: 一番上に表示される記事
          example: 50
        facebookUrl:
          type: string
          description: facebook url
        instagramUrl:
          type: string
          description: instagram url
        twitterUrl:
          type: string
          description: twitter url
        youtubeUrl:
          type: string
          description: youtube url
        url:
          type: string
          description: 任意のurl
        livingArea:
          type: string
          description: 居住地
          example: 東北
        postCount:
          type: string
          description: 投稿数
          example: 1
        followingCount:
          type: integer
          description: フォロー数
        followedCount:
          type: integer
          description: フォロワー数
        interests:
          type: array
          items:
            $ref: "#/components/schemas/Interest"
        isFollow:
          type: boolean
          description: フォローしてるか
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/UserAttribute"
    UserSummaryList:
      type: array
      items:
        $ref: "#/components/schemas/UserSummary"
    UserSummary:
      type: object
      properties:
        id:
          type: integer
        uid:
          type: string
        name:
          type: string
        iconUrl:
          type: string
          format: url
          description: アイコン。userIDから一意に定まる
    UserSummaryWithIsFollowList:
      type: array
      items:
        $ref: "#/components/schemas/UserSummaryWithIsFollow"
    UserSummaryWithIsFollow:
      type: object
      properties:
        id:
          type: integer
        uid:
          type: string
        name:
          type: string
        iconUrl:
          type: string
          format: url
          description: アイコン。userIDから一意に定まる
        isFollow:
          type: boolean
    ReviewRequest:
      type: object
      description: |
        spot_idかinn_idのどちらかは必ず入っていないといけない
      properties:
        travelDate:
          type: string
          description: |
            旅行日
            format yyyy-MM
        accompanying:
          $ref: "#/components/schemas/Accompanying"
        touristSpotId:
          type: integer
        innId:
          type: integer
        score:
          type: integer
        body:
          type: string
        mediaUuids:
          type: array
          description: 1枚目から順番に
          items:
            type: object
            properties:
              uuid:
                type: string
                description: アップロードファイルのUUID
                example: uuid
              mimeType:
                type: string
                description: 拡張子
                example: png
    ReviewUpdateRequest:
      type: object
      description: |
        レビュー更新時request body
        変更があった内容のみ送る事
      properties:
        travelDate:
          type: string
          description: |
            旅行日
            format yyyy-MM
        accompanying:
          $ref: "#/components/schemas/Accompanying"
        hashtagId:
          type: array
          description: |
            ハッシュタグID
          items:
            type: integer
        score:
          type: integer
        body:
          type: string
        mediaUuids:
          type: array
          items:
            type: object
            properties:
              uuid:
                type: string
                description: アップロードファイルのUUID
                example: uuid
              mimeType:
                type: string
                description: 拡張子
                example: png
    ShippingAddressRequest:
      type: object
      properties:
        firstName:
          type: string
          description: |
            名
          example: 太郎
        lastName:
          type: string
          description: |
            姓
          example: 山田
        firstNameKana:
          type: string
          description: |
            名カナ
          example: タロウ
        lastNameKana:
          type: string
          description: |
            姓カナ
          example: ヤマダ
        phoneNumber:
          type: string
          description: |
            電話番号
            ハイフン無
          example: 09088172831
        postalNumber:
          type: string
          description: |
            郵便番号
            ハイフン無
          example:
        prefecture:
          type: string
          description: |
            都道府県
        city:
          type: string
          description: |
            市区町村
        address:
          type: string
          description: |
            番地
        building:
          type: string
          description: |
            建物・部屋番号
        email:
          type: string
          format: email
    CardRequest:
      type: object
      properties:
        cardToken:
          type: string
          description: |
            pay.jpから送られるカードトークン
    PaymentListRequest:
      type: object
      properties:
        payments:
          type: array
          items:
            $ref: "#/components/schemas/PaymentRequest"
        supportCommentBody:
          type: string
          description: |
            応援コメント
          example: 応援しています！
        remark:
          type: string
          description: |
            備考
          example: TシャツはMサイズで
    CfReturnGiftID:
      type: object
      properties:
        cfReturnGiftId:
          type: integer
    PaymentRequest:
      type: object
      properties:
        cfReturnGiftId:
          type: integer
          description: 選択したリターンのid
        cfReturnGiftSnapshotId:
          type: integer
          description: 選択したリターンのスナップショットid
        amount:
          type: integer
          description: 数量
    PaymentList:
      type: array
      items:
        $ref: "#/components/schemas/Payment"
    Payment:
      type: object
      properties:
        id:
          type: integer
        shippingAddress:
          $ref: "#/components/schemas/ShippingAddress"
        totalPrice:
          type: integer
          description: |
            手数用抜きの合計金額
        commissionPrice:
          type: integer
          description: |
            手数料(システム利用料etc...)
        chargeId:
          type: string
          example: ch_oiwr3o1023
        orderedAt:
          type: string
          format: date-time
        card:
          $ref: "#/components/schemas/Card"
        remark:
          type: string
          description: |
            備考
        paymentCfReturnGifts:
          type: array
          items:
            $ref: "#/components/schemas/PaymentCfReturnGift"
    PaymentCfReturnGift:
      type: object
      properties:
        cfReturnGift:
          $ref: "#/components/schemas/CfReturnGift"
        amount:
          type: integer
          example: 2
        inquiryCode:
          type: string
          description: |
            7桁のお問い合わせ番号
          example: AE82EDF
        giftTypeOtherStatus:
          $ref: "#/components/schemas/CfReturnGiftTypeOtherStatus"
        giftTypeReservedTicketStatus:
          $ref: "#/components/schemas/CfReturnGiftTypeReservedTicketStatus"
        ownerConfirmedAt:
          type: string
          format: date-time
    CfReserveRequest:
      type: object
      required:
        - cfReturnGiftId
        - firstName
        - lastName
        - firstNameKana
        - lastNameKana
        - email
        - phoneNumber
        - checkin
        - checkout
        - stayDays
        - adultMemberCount
        - childMemberCount
      properties:
        cfReturnGiftId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        firstNameKana:
          type: string
        lastNameKana:
          type: string
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        checkin:
          type: string
          description: |
            fmt "2006/01/02 15:04"
        checkout:
          type: string
          description: |
            fmt "2006/01/02 15:04"
        stayDays:
          type: integer
        adultMemberCount:
          type: integer
        childMemberCount:
          type: integer
        remark:
          type: string
    NoticeList:
      type: object
      properties:
        notices:
          type: array
          items:
            $ref: "#/components/schemas/Notice"
        unreadCount:
          type: integer
          description: 未読数
          example: 7
    Notice:
      type: object
      properties:
        user:
          type: object
          description: 通知のフックとなったアクションを起こしたユーザー
          properties:
            id:
              type: integer
            name:
              type: string
            iconUrl:
              type: string
        actionType:
          $ref: "#/components/schemas/NoticeType"
        actionTarget:
          $ref: "#/components/schemas/NoticeTarget"
        actionTaregetID:
          type: integer
          description: ターゲットのID
          example: 120
        isRead:
          type: boolean
          description: 既読かどうか
          example: false
    Review:
      type: object
      properties:
        id:
          type: integer
          description: レビューID
          example: 1
        innId:
          type: integer
          description: |
            InnID
            どちらかが必ず0になる
          example: 0
        touristSpotId:
          type: integer
          description: |
            TouristSpotID
            どちらかが必ず0になる
          example: 1
        score:
          type: integer
          description: 評価
          example: 3
        body:
          type: string
          description: 内容
          example: |
            従業員の方が親切でとても充実した時間を過ごす事が出来ました！
        favoriteCount:
          type: integer
          description: いいね数
        accompanying:
          $ref: "#/components/schemas/Accompanying"
        createdAt:
          $ref: "#/components/schemas/createdAt"
        updatedAt:
          $ref: "#/components/schemas/updatedAt"
        travelDate:
          type: string
          description: |
            旅行日
            format yyyy-MM
        commentCount:
          type: integer
          description: コメント数
          example: 4
        isFavorite:
          type: boolean
          description: |
            良いねしているかフラグ
            ＊認証を挟まない場合はfalse
        media:
          type: array
          items:
            $ref: "#/components/schemas/Media"
        hashtag:
          type: array
          description: レビューに紐づくハッシュタグ
          items:
            $ref: "#/components/schemas/Hashtag"
        creator:
          $ref: "#/components/schemas/Creator"
    Media:
      type: object
      properties:
        uuid:
          type: string
        mime:
          type: string
          format: mime
        url:
          type: string
          format: url
        priority:
          type: integer
          description: 順番
    ReviewComment:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: "#/components/schemas/UserSummary"
        body:
          type: string
        replyCount:
          type: integer
          description: コメントに対するコメント数
          example: 12
        favoriteCount:
          type: integer
          description: コメントに対するいいね数
          example: 5
        isFavorite:
          type: boolean
          description: |
            良いねしているかフラグ
            ＊認証を挟まない場合はfalse
        createdAt:
          $ref: "#/components/schemas/createdAt"
    ReviewCommentRequest:
      type: object
      properties:
        body:
          type: string
    ReviewCommentReplyList:
      type: array
      items:
        $ref: "#/components/schemas/ReviewCommentReply"
    ReviewCommentReply:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: "#/components/schemas/UserSummary"
        body:
          type: string
        isFavorite:
          type: boolean
          description: |
            良いねしているかフラグ
            ＊認証を挟まない場合はfalse
        favoriteCount:
          type: integer
          description: いいね数
        createdAt:
          $ref: "#/components/schemas/createdAt"
    CfProjectSupportCommentList:
      type: array
      items:
        $ref: "#/components/schemas/CfProjectSupportComment"
    CfProjectSupportComment:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: "#/components/schemas/UserSummary"
        body:
          type: string
        createdAt:
          $ref: "#/components/schemas/createdAt"
    PostWithCategoryDetailList:
      type: array
      items:
        $ref: "#/components/schemas/PostWithCategoryDetail"
    PostWithCategoryDetail:
      type: object
      properties:
        id:
          type: integer
          description: 記事ID
          example: 1
        thumbnail:
          type: string
          description: サムネイルURL
          example: http://example.com/img/1
        slug:
          type: string
          description: スラッグ
          example: hokkaido
        beginning:
          type: string
          description: 冒頭
        areaCategories:
          type: array
          items:
            $ref: "#/components/schemas/AreaCategoryDetail"
        themeCategories:
          type: array
          items:
            $ref: "#/components/schemas/ThemeCategoryDetail"
        title:
          type: string
          description: 記事タイトル
          example: 埼玉の春を満喫♪
        creator:
          $ref: "#/components/schemas/Creator"
        favoriteCount:
          type: integer
          description: いいね数
          example: 3
        views:
          type: integer
          description: 閲覧数
          example: 6
        isFavorite:
          type: boolean
          description: |
            良いねしているかフラグ
            ＊認証を挟まない場合はfalse
        hideAds:
          type: boolean
          description: 広告非表示フラグ
          example: false
        createdAt:
          $ref: "#/components/schemas/createdAt"
        updatedAt:
          $ref: "#/components/schemas/updatedAt"
        editedAt:
          $ref: "#/components/schemas/editedAt"
    PostShow:
      type: object
      properties:
        id:
          type: integer
          description: 記事ID
          example: 1
        thumbnail:
          type: string
          description: サムネイルURL
          example: http://example.com/img/1
        slug:
          type: string
          description: スラッグ
          example: hokkaido
        beginning:
          type: string
          description: 冒頭
        body:
          type: array
          items:
            $ref: "#/components/schemas/PostBody"
        areaCategories:
          type: array
          items:
            $ref: "#/components/schemas/AreaCategoryDetail"
        themeCategories:
          type: array
          items:
            $ref: "#/components/schemas/ThemeCategoryDetail"
        hashtags:
          $ref: "#/components/schemas/HashtagList"
        title:
          type: string
          description: 記事タイトル
          example: 埼玉の春を満喫♪
        toc:
          type: string
          description: 目次
        creator:
          $ref: "#/components/schemas/Creator"
        favoriteCount:
          type: integer
          description: いいね数
          example: 3
        isFavorite:
          type: boolean
          description: |
            良いねしているかフラグ
            ＊認証を挟まない場合はfalse
        facebookCount:
          type: integer
          description: Facebookシェア数
          example: 4
        twitterCount:
          type: integer
          description: Twitterシェア数
          example: 5
        views:
          type: integer
          description: 閲覧数
          example: 6
        hideAds:
          type: boolean
          description: 広告非表示フラグ
          example: false
        createdAt:
          $ref: "#/components/schemas/createdAt"
        updatedAt:
          $ref: "#/components/schemas/updatedAt"
        editedAt:
          $ref: "#/components/schemas/editedAt"
    PostBody:
      type: object
      properties:
        page:
          type: integer
          description: 何ページ目か
          example: 1
        body:
          type: string
          description: 内容
          example: 春におすすめの......
    FeaturePostList:
      type: array
      items:
        $ref: "#/components/schemas/FeaturePost"
    FeaturePost:
      type: object
      properties:
        id:
          type: integer
          description: 特集記事ID
          example: 1
        title:
          type: string
          description: 特集記事タイトル
          example: 絶景
        slug:
          type: string
          description: スラッグ
          example: スラッグ
        thumbnail:
          type: string
          description: 特集記事サムネイルURL
          example: https://files.stayway.jp/feature_post/1
    ShowFeaturePost:
      type: object
      properties:
        id:
          type: integer
          description: 特集記事ID
          example: 1
        slug:
          type: string
          description: スラッグ
        thumbnail:
          type: string
          description: サムネイルURL
          example: http://example.com/img/1
        title:
          type: string
          description: 記事タイトル
          example: 埼玉の春を満喫♪
        body:
          type: string
          description: 本文
          example: 埼玉の春を満喫できる記事をまとめました！
        creator:
          $ref: "#/components/schemas/Creator"
        views:
          type: integer
          description: 閲覧数
          example: 103
        createdAt:
          $ref: "#/components/schemas/createdAt"
        updatedAt:
          $ref: "#/components/schemas/updatedAt"
        editedAt:
          $ref: "#/components/schemas/editedAt"
        relationPosts:
          $ref: "#/components/schemas/PostWithCategoryDetailList"

    VlogList:
      type: array
      items:
        $ref: "#/components/schemas/Vlog"
    Vlog:
      type: object
      properties:
        id:
          type: integer
          description: 動画ID
          example: 1
        thumbnail:
          type: string
          description: サムネイルURL
          example: http://example.com/img/1
        areaCategories:
          type: array
          items:
            $ref: "#/components/schemas/AreaCategoryDetail"
        themeCategories:
          type: array
          items:
            $ref: "#/components/schemas/ThemeCategoryDetail"
        title:
          type: string
          description: 動画タイトル
          example: 埼玉の春を満喫♪
        favoriteCount:
          type: integer
          description: いいね数
        isFavorite:
          type: boolean
          description: いいねフラグ
    VlogShow:
      type: object
      properties:
        id:
          type: integer
          description: vlogId
          example: 1
        thumbnail:
          type: string
          description: サムネイルURL
          example: http://example.com/img/1
        title:
          type: string
          description: 動画タイトル
          example: 埼玉の春を満喫♪
        body:
          type: string
          description: 本文
          example: おすすめの動画です
        series:
          type: string
          description: シリーズ名
          example: ~シリーズ~
        isFavorite:
          type: boolean
          description: |
            良いねしているかフラグ
            ＊認証を挟まない場合はfalse
        favoriteCount:
          type: integer
          description: いいね数
        shootingDate:
          type: string
          description: 撮影日時, ISO 8601形式
          example: 2020-01-01T13:16+09:00
        createdAt:
          $ref: "#/components/schemas/createdAt"
        updatedAt:
          $ref: "#/components/schemas/updatedAt"
        editedAt:
          $ref: "#/components/schemas/editedAt"
        playTime:
          type: string
          description: 再生時間
          example: "14:02"
        timeLine:
          type: string
          description: 目次みたいなやつ(TODO)
        youtubeUrl:
          type: string
          description: yotubeUrl
          example: https://www.youtube.com/watch?v=b_yyCd1kVNo
        views:
          type: integer
          description: 閲覧数
          example: 123
        facebookCount:
          type: integer
          description: Facebookシェア数
          example: 4
        twitterCount:
          type: integer
          description: Twitterシェア数
          example: 5
        creator:
          $ref: "#/components/schemas/Creator"
        editors:
          type: array
          description: 共同編集者
          items:
            $ref: "#/components/schemas/Creator"
        areaCategories:
          type: array
          items:
            $ref: "#/components/schemas/AreaCategoryDetail"
        themeCategories:
          type: array
          items:
            $ref: "#/components/schemas/ThemeCategoryDetail"
        touristSpots:
          type: array
          items:
            $ref: "#/components/schemas/TouristSpotTiny"
    TouristSpotList:
      type: array
      items:
        $ref: "#/components/schemas/TouristSpot"
    TouristSpotTiny:
      type: object
      required:
        - id
        - slug
        - name
        - city
        - address
        - latitude
        - longitude
        - accessCar
        - accessTrain
        - openingHours
        - price
      properties:
        id:
          type: integer
          description: スポットID
          example: 12345
        slug:
          type: string
          description: スラッグ
          example: zekkei
        name:
          type: string
          description: 観光スポット名
          example: 絶景
        thumbnail:
          type: string
          description: サムネイルURL
          example: https://files.stayway.jp/example/img/1
        url:
          type: string
          description: 公式ホームページ
          example: http://zekkei.com
        city:
          type: string
          description: 件名・都市
          example: 渋谷
        address:
          type: string
          description: 住所
          example: 東京都渋谷区道玄坂１丁目１０−１０番８号 １F・2F 渋谷道玄坂東急ビル
        latitude:
          type: number
          format: double
          description: 緯度
          example: 35.65695
        longitude:
          type: number
          format: double
          description: 経度
          example: 139.698556
        accessCar:
          type: string
          description: 車でのアクセス
        accessTrain:
          type: string
          description: 電車でのアクセス
        accessBus:
          type: string
          description: バスでのアクセス
        openingHours:
          type: string
          description: 営業時間
        tel:
          type: string
          description: 電話番号
          example: 080-2374-2754
        price:
          type: integer
        instagramUrl:
          type: string
          description: インスタグラムURL
          example: http://instagram.com/zekkei
        searchInnUrl:
          type: string
          description: 関連宿を探すためのURL
          example: http://stayway.jp/zekkei/recommend
        rate:
          type: number
          format: double
          description: 評価
          example: 3.5
        vendorRate:
          type: number
          format: double
          description: 外部評価
          example: 2.5
        reviewCount:
          type: integer
          description: レビュー数
    TouristSpot:
      type: object
      required:
        - id
        - slug
        - name
        - city
        - address
        - latitude
        - longitude
        - accessCar
        - accessTrain
        - openingHours
        - price
      properties:
        id:
          type: integer
          description: スポットID
          example: 12345
        slug:
          type: string
          description: スラッグ
          example: zekkei
        name:
          type: string
          description: 観光スポット名
          example: 絶景
        thumbnail:
          type: string
          description: サムネイルURL
          example: https://files.stayway.jp/example/img/1
        url:
          type: string
          description: 公式ホームページ
          example: http://zekkei.com
        city:
          type: string
          description: 件名・都市
          example: 渋谷
        address:
          type: string
          description: 住所
          example: 東京都渋谷区道玄坂１丁目１０−１０番８号 １F・2F 渋谷道玄坂東急ビル
        latitude:
          type: number
          format: double
          description: 緯度
          example: 35.65695
        longitude:
          type: number
          format: double
          description: 経度
          example: 139.698556
        accessCar:
          type: string
          description: 車でのアクセス
        accessTrain:
          type: string
          description: 電車でのアクセス
        accessBus:
          type: string
          description: バスでのアクセス
        openingHours:
          type: string
          description: 営業時間
        tel:
          type: string
          description: 電話番号
          example: 080-2374-2754
        price:
          type: integer
        instagramUrl:
          type: string
          description: インスタグラムURL
          example: http://instagram.com/zekkei
        searchInnUrl:
          type: string
          description: 関連宿を探すためのURL
          example: http://stayway.jp/zekkei/recommend
        rate:
          type: number
          format: double
          description: 評価
          example: 3.5
        vendorRate:
          type: number
          format: double
          description: 外部評価
          example: 2.5
        reviewCount:
          type: number
          description: レビュー件数
        areaCategories:
          type: array
          items:
            $ref: "#/components/schemas/AreaCategoryDetail"
        themeCategories:
          type: array
          items:
            $ref: "#/components/schemas/ThemeCategoryDetail"
        spotCategories:
          type: array
          description: 観光スポットカテゴリー
          items:
            $ref: "#/components/schemas/Category"
        createdAt:
          $ref: "#/components/schemas/createdAt"
        updatedAt:
          $ref: "#/components/schemas/updatedAt"
        editedAt:
          $ref: "#/components/schemas/editedAt"
    HashtagList:
      type: array
      items:
        $ref: "#/components/schemas/Hashtag"
    Hashtag:
      type: object
      properties:
        id:
          type: integer
          description: ハッシュタグID
          example: 1
        name:
          type: string
          description: ハッシュタグ名
          example: 春に行きたい
    SearchSuggestions:
      type: object
      properties:
        area:
          type: array
          items:
            $ref: "#/components/schemas/AreaCategory"
        touristSpot:
          type: array
          items:
            $ref: "#/components/schemas/TouristSpotTiny"
        hashtag:
          type: array
          items:
            $ref: "#/components/schemas/Hashtag"
        user:
          type: array
          items:
            $ref: "#/components/schemas/UserSummary"
    ComicList:
      type: array
      items:
        $ref: "#/components/schemas/Comic"
    Comic:
      type: object
      properties:
        id:
          type: integer
          description: 漫画ID
          example: 1
        slug:
          type: string
          description: スラッグ
          example: 第一話
        title:
          type: string
          description: タイトル
          example: 第一話 外付けの
        thumbnail:
          type: string
          description: サムネイルURL
          example: http://example.com/comic/img/1
        favoriteCount:
          type: integer
          description: いいね数
        isFavorite:
          type: boolean
          description: いいねフラグ
    ComicShow:
      type: object
      required:
        - id
        - slug
        - title
        - thumbnail
        - body
        - createdAt
        - creator
      properties:
        id:
          type: integer
          description: 漫画ID
          example: 1
        slug:
          type: string
          description: スラッグ
          example: 第一話
        title:
          type: string
          description: title
          example: 第一話 外付けの
        thumbnail:
          type: string
          description: サムネイルURL
          example: http://example.com/comic/img/1
        body:
          type: string
          description: 本文
          example: HTML(未定)
        isFavorite:
          type: boolean
          description: |
            良いねしているかフラグ
            ＊認証を挟まない場合はfalse
        favoriteCount:
          type: integer
          description: |
            いいね数
        createdAt:
          $ref: "#/components/schemas/createdAt"
        creator:
          $ref: "#/components/schemas/Creator"
    InterestList:
      type: array
      items:
        $ref: "#/components/schemas/Interest"
    Interest:
      type: object
      properties:
        id:
          type: integer
          description: id
          example: 1
        name:
          type: string
          description: 興味名前
          example: 東北
        interestGroup:
          $ref: "#/components/schemas/InterestGroup"
    Creator:
      type: object
      properties:
        id:
          type: integer
          description: ユーザーID
          example: 1
        uid:
          type: string
          description: ユーザーが一意に決めるID
          example: "yuta0817"
        iconUrl:
          type: string
          description: アイコンURL
          example: https://files.stayway.jp/avatar/1
        name:
          type: string
          description: クリエイター名
          example: Hitomi
        profile:
          type: string
          description: クリエイタープロフィール
          example: |
            横浜生まれ東京育ちの旅好きライター。年に２，３回は国内外の旅行に行きます。
            旅先での楽しみはグルメとお酒と地元の人と仲良くなること！
        facebookUrl:
          type: string
          description: facebookのurl
          example: https://facebook.com
        instagramUrl:
          type: string
          description: instagramのurl
          example: https://instagram.com
        twitterUrl:
          type: string
          description: twitterのurl
          example: https://twitter.com
        youtubeUrl:
          type: string
          description: youtubeのurl
          example: https://www.youtube.com/channel/L2pzA7wzUluismTWYbmvlEeD
        url:
          type: string
          description: 任意のurl
          example: https://www.creator.com
        isFollow:
          type: boolean
          description: フォローしているか
          example: 1
    Category:
      type: object
      required:
        - id
        - name
        - slug
        - type
      properties:
        id:
          type: integer
          description: id
          example: 1
        name:
          type: string
          description: カテゴリ名
          example: 北海道
        slug:
          type: string
          description: スラッグ
          example: hokkaido
        type:
          type: string
    CategoryForSlug:
      type: object
      required:
        - id
        - name
        - slug
        - type
      properties:
        id:
          type: integer
          description: id
          example: 1
        name:
          type: string
          description: カテゴリ名
          example: 北海道
        slug:
          type: string
          description: スラッグ
          example: hokkaido
        type:
          type: string
        areaGroup:
          type: string
          enum:
            - Undefined
            - Japan
            - World
    AreaCategoryList:
      type: array
      items:
        $ref: "#/components/schemas/AreaCategoryWithPostCount"
    AreaCategoryDetail:
      type: object
      required:
        - id
        - name
        - type
        - slug
        - area
      properties:
        id:
          type: integer
          description: id
          example: 1
        name:
          type: string
          description: カテゴリ名
          example: 北海道
        slug:
          type: string
          description: スラッグ
          example: hokkaido
        type:
          type: string
          enum:
            - Undefined
            - Area
            - SubArea
            - SubSubArea
        areaGroup:
          type: string
          enum:
            - Undefined
            - Japan
            - World
        area:
          $ref: "#/components/schemas/AreaCategory"
        subArea:
          $ref: "#/components/schemas/AreaCategory"
        subSubArea:
          $ref: "#/components/schemas/AreaCategory"
    AreaCategory:
      type: object
      required:
        - id
        - name
        - slug
        - type
      properties:
        id:
          type: integer
          description: id
          example: 1
        name:
          type: string
          description: カテゴリ名
          example: 北海道
        slug:
          type: string
          description: スラッグ
          example: hokkaido
        type:
          type: string
          enum:
            - Undefined
            - Area
            - SubArea
            - SubSubArea
    AreaCategoryWithPostCount:
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: integer
          description: id
          example: 1
        name:
          type: string
          description: カテゴリ名
          example: 北海道
        slug:
          type: string
          description: スラッグ
          example: hokkaido
        type:
          type: string
          enum:
            - Undefined
            - Area
            - SubArea
            - SubSubArea
        postCount:
          type: integer
          description: 記事数
          example: 3
    ThemeCategoryList:
      type: array
      items:
        $ref: "#/components/schemas/ThemeCategoryWithPostCount"
    ThemeCategoryWithPostCount:
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: integer
          description: id
          example: 1
        name:
          type: string
          description: カテゴリ名
          example: 初めての民泊
        type:
          type: string
          enum:
            - Undefined
            - Theme
            - SubTheme
        postCount:
          type: integer
          description: 記事数
          example: 3
    ThemeCategoryDetail:
      type: object
      required:
        - id
        - name
        - type
        - theme
      properties:
        id:
          type: integer
          description: id
          example: 1
        name:
          type: string
          description: カテゴリ名
          example: 初めての民泊
        slug:
          type: string
          description: slug
          example: スラッグ
        type:
          type: string
          enum:
            - Undefined
            - Theme
            - SubTheme
        theme:
          $ref: "#/components/schemas/ThemeCategory"
        subTheme:
          $ref: "#/components/schemas/ThemeCategory"
    ThemeCategory:
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: integer
          description: id
          example: 1
        name:
          type: string
          description: カテゴリ名
          example: 初めての民泊
        type:
          type: string
          enum:
            - Undefined
            - Theme
            - SubTheme
    RankingUserList:
      type: array
      items:
        $ref: "#/components/schemas/RankingUser"
    RankingUser:
      type: object
      properties:
        id:
          type: integer
          description: ユーザーID
          example: 1
        uid:
          type: string
          description: ユーザーが一意に決めるID
          example: "yuta0817"
        name:
          type: string
          description: 名前
          example: hanako
        profile:
          type: string
          description: プロフィール
          example: |
            横浜生まれ東京育ちの旅好きライター。年に２，３回は国内外の旅行に行きます。
            旅先での楽しみはグルメとお酒と地元の人と仲良くなること
        iconUrl:
          type: string
          description: アイコン画像URL
          example: https://files.stayway.jp/avatar/1
        interest:
          type: array
          items:
            type: string
            description: 興味分野
          example:
            - 沖縄
            - 夜景
    InnList:
      type: array
      items:
        $ref: "#/components/schemas/Inn"
    Inn:
      type: object
      properties:
        id:
          type: integer
          description: 宿ID
          example: 1
        name:
          type: string
          description: 宿名前
          example: "グランメゾンド"
        url:
          type: string
          description: 予約サイトURL
          example: "https://www.booking.com/hotel/cn/grand-hongqiao-shanghai.html"
        brand:
          type: object
          properties:
            id:
              type: integer
              description: ブランドID
              example: 4
            name:
              type: string
              description: ブランド名
              example: "アコーホテルズ"
        thumbnail:
          type: string
          description: イメージURL
          example: "https://images.trvl-media.com/hotels/2000000/1680000/1678800/1678784/8a180494_b.jpg"
        latitude:
          type: number
          format: double
          description: 緯度
          example: 35.65695
        longitude:
          type: number
          format: double
          description: 経度
          example: 139.698556
        countryCode:
          type: string
          description: 国コード
          example: "cn"
        address:
          type: string
          description: 住所
          example: "中国 上海 369"
        postCode:
          type: string
          description: 郵便番号
          example: "200336"
        phone:
          type: string
          description: 電話番号
          example: "0120-117-117"
        access:
          type: string
          description: アクセス
          example: "上海から10分"
        stayDaysMin:
          type: integer
          description: 最低宿泊数
          example: 1
        stayDaysMax:
          type: integer
          description: 最大宿泊数
          example: 365
        checkInTime:
          type: string
          description: チェックイン時間
          example: "14:00"
        checkOutTime:
          type: string
          description: チェックアウト時間
          example: "12:00"
        roomCount:
          type: integer
          description: 部屋数
          example: 363
        bedCount:
          type: integer
          description: ベッド数
          example: 1
        score:
          type: number
          format: double
          description: 評価
          example: 3.7
        reviewCount:
          type: integer
          description: レビュー数
          example: 884
        minPrice:
          type: number
          format: double
          description: 最低金額
          example: 1352.81
        maxPrice:
          type: number
          format: double
          description: 最高金額
          example: 1352.81
        innTypes:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: 宿タイプID
                example: 1
              name:
                type: string
                description: 宿タイプ
                example: "ビジネスホテル"
              url:
                type: string
                example: "/hotels/i_1/"
        availableCards:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: カード会社ID
                example: 1
              name:
                type: string
                description: カード会社名
                example: Visa
        roomTypes:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: ルームタイプID
                example: 1
              name:
                type: string
                description: ルームタイプ
                example: "ホテル"
        trueTags:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: タグID
                example: 1
              name:
                type: string
                description: タグ名
                example: "ツイン"
        falseTags:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: タグID
                example: 1
              name:
                type: string
                description: タグ名
                example: "ツイン"
        hasNext:
          type: boolean
          description: 次のページがあるか
          example: true
    ShippingAddress:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
          description: |
            姓
          example: 山田
        lastName:
          type: string
          description: |
            名
          example: 太郎
        firstNameKana:
          type: string
          description: |
            姓カナ
          example: ヤマダ
        lastNameKana:
          type: string
          description: |
            名カナ
          example: タロウ
        phoneNumber:
          type: string
          description: |
            電話番号
            ハイフン無
          example: 09088172831
        postalNumber:
          type: string
          description: |
            郵便番号
            ハイフン無
          example:
        prefecture:
          type: string
          description: |
            都道府県
        city:
          type: string
          description: |
            市区町村
        address:
          type: string
          description: |
            番地
        building:
          type: string
          description: |
            建物・部屋番号
    Card:
      type: object
      properties:
        id:
          type: integer
        last4:
          type: string
          description: カード番号末尾
        expired:
          type: string
          description: |
            有効期限
          example: 04/22
    ReportRequest:
      type: object
      properties:
        targetId:
          type: integer
          description: 通報するメディアid
          example: 1
        targetType:
          $ref: "#/components/schemas/ReportTargetType"
        reason:
          $ref: "#/components/schemas/ReportReasonType"
        body:
          type: string
          description: コメント
    CfProjectList:
      type: array
      items:
        $ref: "#/components/schemas/CfProject"
    CfProject:
      type: object
      properties:
        id:
          type: integer
          example: 1
        snapshotId:
          type: integer
          example: 1
        title:
          type: string
        summary:
          type: string
        body:
          type: string
        goalPrice:
          type: integer
        achievedPrice:
          type: integer
        deadLine:
          type: string
          format: date-time
        supporterCount:
          type: integer
        favoriteCount:
          type: integer
        facebookCount:
          type: integer
        twitterCount:
          type: integer
        isSupport:
          type: boolean
        creator:
          $ref: "#/components/schemas/Creator"
        thumbnails:
          type: array
          items:
            $ref: "#/components/schemas/CfProjectThumbnail"
        areaCategories:
          type: array
          items:
            $ref: "#/components/schemas/AreaCategoryDetail"
        themeCategories:
          type: array
          items:
            $ref: "#/components/schemas/ThemeCategoryDetail"
        createdAt:
          $ref: "#/components/schemas/createdAt"
        editedAt:
          $ref: "#/components/schemas/editedAt"
    CfProjectThumbnail:
      type: object
      properties:
        priority:
          type: integer
          example: 1
          description: 表示順
        thumbnail:
          type: string
          example: http://stg-files.stayway.jp/image
    CfReturnGiftList:
      type: array
      items:
        $ref: "#/components/schemas/CfReturnGift"
    CfReturnGift:
      type: object
      properties:
        id:
          type: integer
          example: 1
        snapshotId:
          type: integer
          example: 1
        cfProjectId:
          type: integer
          example: 1
        title:
          type: string
          example: リターン名
        thumbnail:
          type: string
        giftType:
          type: string
          enum:
            - ReservedTicket
            - Other
        body:
          type: string
        price:
          type: integer
        isCancelable:
          type: boolean
          description: キャンセル可能か
        deadline:
          type: string
          description: |
            有効期限
            ＊宿泊券(giftType:ReservedTicket)の場合のみ
        soldCount:
          type: integer
        supporterCount:
          type: integer
        fullAmount:
          type: integer
        deliveryDate:
          type: string
    CaptureChargeResult:
      type: object
      properties:
        cfProjectId:
          type: integer
        supporterCount:
          type: integer
        achievedPrice:
          type: integer
    ReportReasonType:
      type: string
      enum:
        - UNKNOWN
        - SEXUAL
        - INAPPROPRIATE
        - COPYRIGHT
        - SELFHARM
        - LIE
        - UNRELATED
        - AD
    ReportTargetType:
      type: string
      enum:
        - REVIEW
        - COMMENT
        - REPLY
    Accompanying:
      type: string
      enum:
        - BUSINESS
        - COUPLE
        - FAMILY
        - FRIEND
        - ONLY
        - WITHCHILD
    NoticeType:
      type: string
      enum:
        - FAVORITE
        - COMMENT
        - REPLY
        - FOLLOW
        - TAGGED
    NoticeTarget:
      type: string
      enum:
        - POST
        - REVIEW
        - VLOG
        - COMMENT
        - USER
        - REPLY
    InterestGroup:
      type: string
      enum:
        - Undefined
        - Style
        - Scene
        - Gourmet
        - LifeStyle
        - Activity
        - Sport
    CfProjectSortBy:
      type: string
      enum:
        - New
        - LargeAmount
        - Push
        - Attention
    CfReturnGiftTypeOtherStatus:
      type: string
      enum:
        - Undefined
        - OwnerUnconfirmed
        - OwnerConfirmed
        - Canceled
      default: Undefined
      description: |
        giftTypeがOtherの場合有効
        Other以外の場合Undefined
    CfReturnGiftTypeReservedTicketStatus:
      type: string
      enum:
        - Undefined
        - Unreserved
        - Reserved
      default: Undefined
      description: |
        giftTypeがReservedTicketの場合有効
        ReservedTicket以外の場合Undefined
    UserAttribute:
      type: string
      enum:
        - Common
        - WP
        - CfProjectOwner
      description: |
        Userが持つ属性
        Common = 一般User
        WP = wpにも登録されているクリエイター
        CfProjectOwner = CfProjectのowner
    Error:
      type: object
      properties:
        Message:
          type: string