// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package repository

import (
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"github.com/google/wire"
	"github.com/jinzhu/gorm"
	"github.com/stayway-corp/stayway-media-api/pkg/config"
	"net/url"
)

import (
	_ "github.com/jinzhu/gorm/dialects/mysql"
)

// Injectors from wire.go:

func InitializeTest(configFilePath config.ConfigFilePath) (*Test, error) {
	configConfig, err := config.GetConfig(configFilePath)
	if err != nil {
		return nil, err
	}
	db, err := ProvideDB(configConfig)
	if err != nil {
		return nil, err
	}
	session, err := ProvideAWSSession(configConfig)
	if err != nil {
		return nil, err
	}
	uploader := ProvideS3Uploader(session)
	categoryCommandRepositoryImpl := &CategoryCommandRepositoryImpl{
		DB: db,
	}
	categoryQueryRepositoryImpl := &CategoryQueryRepositoryImpl{
		DB: db,
	}
	comicCommandRepositoryImpl := &ComicCommandRepositoryImpl{
		DB: db,
	}
	comicQueryRepositoryImpl := &ComicQueryRepositoryImpl{
		DB: db,
	}
	featureCommandRepositoryImpl := &FeatureCommandRepositoryImpl{
		DB: db,
	}
	featureQueryRepositoryImpl := &FeatureQueryRepositoryImpl{
		DB: db,
	}
	lcategoryCommandRepositoryImpl := &LcategoryCommandRepositoryImpl{
		DB: db,
	}
	lcategoryQueryRepositoryImpl := &LcategoryQueryRepositoryImpl{
		DB: db,
	}
	dao := DAO{
		DB_: db,
	}
	touristSpotCommandRepositoryImpl := &TouristSpotCommandRepositoryImpl{
		DAO: dao,
	}
	touristSpotQueryRepositoryImpl := &TouristSpotQueryRepositoryImpl{
		DB: db,
	}
	postCommandRepositoryImpl := &PostCommandRepositoryImpl{
		DAO: dao,
	}
	postQueryRepositoryImpl := &PostQueryRepositoryImpl{
		DB: db,
	}
	userQueryRepositoryImpl := &UserQueryRepositoryImpl{
		DB: db,
	}
	aws := configConfig.AWS
	userCommandRepositoryImpl := &UserCommandRepositoryImpl{
		DB:            db,
		MediaUploader: uploader,
		AWSConfig:     aws,
	}
	vlogCommandRepositoryImpl := &VlogCommandRepositoryImpl{
		DB: db,
	}
	vlogQueryRepositoryImpl := &VlogQueryRepositoryImpl{
		DB: db,
	}
	wordpress := _wireWordpressValue
	staywayMedia := _wireStaywayMediaValue
	wordpressQueryRepositoryImpl := NewWordpressQueryRepositoryImpl(wordpress, staywayMedia)
	test := &Test{
		Config:                           configConfig,
		DB:                               db,
		AWS:                              session,
		Uploader:                         uploader,
		CategoryCommandRepositoryImpl:    categoryCommandRepositoryImpl,
		CategoryQueryRepositoryImpl:      categoryQueryRepositoryImpl,
		ComicCommandRepositoryImpl:       comicCommandRepositoryImpl,
		ComicQueryRepositoryImpl:         comicQueryRepositoryImpl,
		FeatureCommandRepositoryImpl:     featureCommandRepositoryImpl,
		FeatureQueryRepositoryImpl:       featureQueryRepositoryImpl,
		LcategoryCommandRepositoryImpl:   lcategoryCommandRepositoryImpl,
		LcategoryQueryRepositoryImpl:     lcategoryQueryRepositoryImpl,
		TouristSpotCommandRepositoryImpl: touristSpotCommandRepositoryImpl,
		TouristSpotQueryRepositoryImpl:   touristSpotQueryRepositoryImpl,
		PostCommandRepositoryImpl:        postCommandRepositoryImpl,
		PostQueryRepositoryImpl:          postQueryRepositoryImpl,
		UserQueryRepositoryImpl:          userQueryRepositoryImpl,
		UserCommandRepositoryImpl:        userCommandRepositoryImpl,
		VlogCommandRepositoryImpl:        vlogCommandRepositoryImpl,
		VlogQueryRepositoryImpl:          vlogQueryRepositoryImpl,
		WordpressQueryRepositoryImpl:     wordpressQueryRepositoryImpl,
	}
	return test, nil
}

var (
	_wireWordpressValue = config.Wordpress{
		BaseURL: config.URL{
			URL: url.URL{
				Scheme: "https",
				Host:   "stg-admin.stayway.jp",
				Path:   "/tourism",
			},
		},
	}
	_wireStaywayMediaValue = config.StaywayMedia{
		BaseURL: config.URL{
			URL: url.URL{
				Scheme: "https",
				Host:   "stg.stayway.jp",
				Path:   "/tourism",
			},
		},
		FilesURL: config.URL{
			URL: url.URL{
				Scheme: "https",
				Host:   "stg-files.stayway.jp",
			},
		},
	}
)

// wire.go:

type Test struct {
	Config   *config.Config
	DB       *gorm.DB
	AWS      *session.Session
	Uploader *s3manager.Uploader
	*CategoryCommandRepositoryImpl
	*CategoryQueryRepositoryImpl
	*ComicCommandRepositoryImpl
	*ComicQueryRepositoryImpl
	*FeatureCommandRepositoryImpl
	*FeatureQueryRepositoryImpl
	*LcategoryCommandRepositoryImpl
	*LcategoryQueryRepositoryImpl
	*TouristSpotCommandRepositoryImpl
	*TouristSpotQueryRepositoryImpl
	*PostCommandRepositoryImpl
	*PostQueryRepositoryImpl
	*UserQueryRepositoryImpl
	*UserCommandRepositoryImpl
	*VlogCommandRepositoryImpl
	*VlogQueryRepositoryImpl
	*WordpressQueryRepositoryImpl
}

var configValuesSet = wire.NewSet(wire.Value(config.Wordpress{
	BaseURL: config.URL{
		URL: url.URL{
			Scheme: "https",
			Host:   "stg-admin.stayway.jp",
			Path:   "/tourism",
		},
	},
}), wire.Value(config.StaywayMedia{
	BaseURL: config.URL{
		URL: url.URL{
			Scheme: "https",
			Host:   "stg.stayway.jp",
			Path:   "/tourism",
		},
	},
	FilesURL: config.URL{
		URL: url.URL{
			Scheme: "https",
			Host:   "stg-files.stayway.jp",
		},
	},
}),
)
