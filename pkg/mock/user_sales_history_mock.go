// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/user_sales_history.go

// Package mock_repository is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/stayway-corp/stayway-media-api/pkg/domain/entity"
)

// MockUserSalesHistoryCommandRepository is a mock of UserSalesHistoryCommandRepository interface
type MockUserSalesHistoryCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserSalesHistoryCommandRepositoryMockRecorder
}

// MockUserSalesHistoryCommandRepositoryMockRecorder is the mock recorder for MockUserSalesHistoryCommandRepository
type MockUserSalesHistoryCommandRepositoryMockRecorder struct {
	mock *MockUserSalesHistoryCommandRepository
}

// NewMockUserSalesHistoryCommandRepository creates a new mock instance
func NewMockUserSalesHistoryCommandRepository(ctrl *gomock.Controller) *MockUserSalesHistoryCommandRepository {
	mock := &MockUserSalesHistoryCommandRepository{ctrl: ctrl}
	mock.recorder = &MockUserSalesHistoryCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserSalesHistoryCommandRepository) EXPECT() *MockUserSalesHistoryCommandRepositoryMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockUserSalesHistoryCommandRepository) Store(ctx context.Context, history *entity.UserSalesHistoryTiny) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockUserSalesHistoryCommandRepositoryMockRecorder) Store(ctx, history interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUserSalesHistoryCommandRepository)(nil).Store), ctx, history)
}
