// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/payjp/charge.go

// Package mock_payjp is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	payjp "github.com/payjp/payjp-go/v1"
)

// MockChargeCommandRepository is a mock of ChargeCommandRepository interface
type MockChargeCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChargeCommandRepositoryMockRecorder
}

// MockChargeCommandRepositoryMockRecorder is the mock recorder for MockChargeCommandRepository
type MockChargeCommandRepositoryMockRecorder struct {
	mock *MockChargeCommandRepository
}

// NewMockChargeCommandRepository creates a new mock instance
func NewMockChargeCommandRepository(ctrl *gomock.Controller) *MockChargeCommandRepository {
	mock := &MockChargeCommandRepository{ctrl: ctrl}
	mock.recorder = &MockChargeCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChargeCommandRepository) EXPECT() *MockChargeCommandRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockChargeCommandRepository) Create(customerID, cardID string, amount int) (*payjp.ChargeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", customerID, cardID, amount)
	ret0, _ := ret[0].(*payjp.ChargeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockChargeCommandRepositoryMockRecorder) Create(customerID, cardID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChargeCommandRepository)(nil).Create), customerID, cardID, amount)
}

// Capture mocks base method
func (m *MockChargeCommandRepository) Capture(chargeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capture", chargeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Capture indicates an expected call of Capture
func (mr *MockChargeCommandRepositoryMockRecorder) Capture(chargeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capture", reflect.TypeOf((*MockChargeCommandRepository)(nil).Capture), chargeID)
}

// Refund mocks base method
func (m *MockChargeCommandRepository) Refund(chargeID string, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refund", chargeID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refund indicates an expected call of Refund
func (mr *MockChargeCommandRepositoryMockRecorder) Refund(chargeID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refund", reflect.TypeOf((*MockChargeCommandRepository)(nil).Refund), chargeID, amount)
}
