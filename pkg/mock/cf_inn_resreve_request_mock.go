// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/cf_inn_reserve_request.go

// Package mock_repository is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/stayway-corp/stayway-media-api/pkg/domain/entity"
)

// MockCfInnReserveRequestCommandRepository is a mock of CfInnReserveRequestCommandRepository interface
type MockCfInnReserveRequestCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCfInnReserveRequestCommandRepositoryMockRecorder
}

// MockCfInnReserveRequestCommandRepositoryMockRecorder is the mock recorder for MockCfInnReserveRequestCommandRepository
type MockCfInnReserveRequestCommandRepositoryMockRecorder struct {
	mock *MockCfInnReserveRequestCommandRepository
}

// NewMockCfInnReserveRequestCommandRepository creates a new mock instance
func NewMockCfInnReserveRequestCommandRepository(ctrl *gomock.Controller) *MockCfInnReserveRequestCommandRepository {
	mock := &MockCfInnReserveRequestCommandRepository{ctrl: ctrl}
	mock.recorder = &MockCfInnReserveRequestCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCfInnReserveRequestCommandRepository) EXPECT() *MockCfInnReserveRequestCommandRepositoryMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockCfInnReserveRequestCommandRepository) Store(ctx context.Context, request *entity.CfInnReserveRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockCfInnReserveRequestCommandRepositoryMockRecorder) Store(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockCfInnReserveRequestCommandRepository)(nil).Store), ctx, request)
}

// MockCfInnReserveRequestQueryRepository is a mock of CfInnReserveRequestQueryRepository interface
type MockCfInnReserveRequestQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCfInnReserveRequestQueryRepositoryMockRecorder
}

// MockCfInnReserveRequestQueryRepositoryMockRecorder is the mock recorder for MockCfInnReserveRequestQueryRepository
type MockCfInnReserveRequestQueryRepositoryMockRecorder struct {
	mock *MockCfInnReserveRequestQueryRepository
}

// NewMockCfInnReserveRequestQueryRepository creates a new mock instance
func NewMockCfInnReserveRequestQueryRepository(ctrl *gomock.Controller) *MockCfInnReserveRequestQueryRepository {
	mock := &MockCfInnReserveRequestQueryRepository{ctrl: ctrl}
	mock.recorder = &MockCfInnReserveRequestQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCfInnReserveRequestQueryRepository) EXPECT() *MockCfInnReserveRequestQueryRepositoryMockRecorder {
	return m.recorder
}

// IsExistByPaymentIDAndCfReturnGiftID mocks base method
func (m *MockCfInnReserveRequestQueryRepository) IsExistByPaymentIDAndCfReturnGiftID(paymentID, cfReturnGiftID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistByPaymentIDAndCfReturnGiftID", paymentID, cfReturnGiftID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExistByPaymentIDAndCfReturnGiftID indicates an expected call of IsExistByPaymentIDAndCfReturnGiftID
func (mr *MockCfInnReserveRequestQueryRepositoryMockRecorder) IsExistByPaymentIDAndCfReturnGiftID(paymentID, cfReturnGiftID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistByPaymentIDAndCfReturnGiftID", reflect.TypeOf((*MockCfInnReserveRequestQueryRepository)(nil).IsExistByPaymentIDAndCfReturnGiftID), paymentID, cfReturnGiftID)
}
