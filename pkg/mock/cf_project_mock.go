// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/cf_project.go

// Package mock_repository is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/stayway-corp/stayway-media-api/pkg/domain/entity"
	query "github.com/stayway-corp/stayway-media-api/pkg/domain/model/query"
)

// MockCfProjectCommandRepository is a mock of CfProjectCommandRepository interface
type MockCfProjectCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCfProjectCommandRepositoryMockRecorder
}

// MockCfProjectCommandRepositoryMockRecorder is the mock recorder for MockCfProjectCommandRepository
type MockCfProjectCommandRepositoryMockRecorder struct {
	mock *MockCfProjectCommandRepository
}

// NewMockCfProjectCommandRepository creates a new mock instance
func NewMockCfProjectCommandRepository(ctrl *gomock.Controller) *MockCfProjectCommandRepository {
	mock := &MockCfProjectCommandRepository{ctrl: ctrl}
	mock.recorder = &MockCfProjectCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCfProjectCommandRepository) EXPECT() *MockCfProjectCommandRepositoryMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockCfProjectCommandRepository) Store(arg0 context.Context, arg1 *entity.CfProject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockCfProjectCommandRepositoryMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).Store), arg0, arg1)
}

// Lock mocks base method
func (m *MockCfProjectCommandRepository) Lock(c context.Context, id int) (*entity.CfProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", c, id)
	ret0, _ := ret[0].(*entity.CfProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock
func (mr *MockCfProjectCommandRepositoryMockRecorder) Lock(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).Lock), c, id)
}

// UndeleteByID mocks base method
func (m *MockCfProjectCommandRepository) UndeleteByID(c context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndeleteByID", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UndeleteByID indicates an expected call of UndeleteByID
func (mr *MockCfProjectCommandRepositoryMockRecorder) UndeleteByID(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndeleteByID", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).UndeleteByID), c, id)
}

// DeleteByID mocks base method
func (m *MockCfProjectCommandRepository) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockCfProjectCommandRepositoryMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).DeleteByID), id)
}

// StoreUserFavoriteCfProject mocks base method
func (m *MockCfProjectCommandRepository) StoreUserFavoriteCfProject(c context.Context, fav *entity.UserFavoriteCfProject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUserFavoriteCfProject", c, fav)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUserFavoriteCfProject indicates an expected call of StoreUserFavoriteCfProject
func (mr *MockCfProjectCommandRepositoryMockRecorder) StoreUserFavoriteCfProject(c, fav interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUserFavoriteCfProject", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).StoreUserFavoriteCfProject), c, fav)
}

// DeleteUserFavoriteCfProject mocks base method
func (m *MockCfProjectCommandRepository) DeleteUserFavoriteCfProject(c context.Context, fav *entity.UserFavoriteCfProject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFavoriteCfProject", c, fav)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFavoriteCfProject indicates an expected call of DeleteUserFavoriteCfProject
func (mr *MockCfProjectCommandRepositoryMockRecorder) DeleteUserFavoriteCfProject(c, fav interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFavoriteCfProject", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).DeleteUserFavoriteCfProject), c, fav)
}

// IncrementFavoriteCountByID mocks base method
func (m *MockCfProjectCommandRepository) IncrementFavoriteCountByID(c context.Context, projectID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementFavoriteCountByID", c, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementFavoriteCountByID indicates an expected call of IncrementFavoriteCountByID
func (mr *MockCfProjectCommandRepositoryMockRecorder) IncrementFavoriteCountByID(c, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementFavoriteCountByID", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).IncrementFavoriteCountByID), c, projectID)
}

// DecrementFavoriteCountByID mocks base method
func (m *MockCfProjectCommandRepository) DecrementFavoriteCountByID(c context.Context, projectID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementFavoriteCountByID", c, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementFavoriteCountByID indicates an expected call of DecrementFavoriteCountByID
func (mr *MockCfProjectCommandRepositoryMockRecorder) DecrementFavoriteCountByID(c, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementFavoriteCountByID", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).DecrementFavoriteCountByID), c, projectID)
}

// StoreSupportComment mocks base method
func (m *MockCfProjectCommandRepository) StoreSupportComment(c context.Context, comment *entity.CfProjectSupportCommentTiny) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSupportComment", c, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSupportComment indicates an expected call of StoreSupportComment
func (mr *MockCfProjectCommandRepositoryMockRecorder) StoreSupportComment(c, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSupportComment", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).StoreSupportComment), c, comment)
}

// IncrementSupportCommentCount mocks base method
func (m *MockCfProjectCommandRepository) IncrementSupportCommentCount(c context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementSupportCommentCount", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementSupportCommentCount indicates an expected call of IncrementSupportCommentCount
func (mr *MockCfProjectCommandRepositoryMockRecorder) IncrementSupportCommentCount(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementSupportCommentCount", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).IncrementSupportCommentCount), c, id)
}

// IncrementAchievedPrice mocks base method
func (m *MockCfProjectCommandRepository) IncrementAchievedPrice(c context.Context, id, price int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementAchievedPrice", c, id, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementAchievedPrice indicates an expected call of IncrementAchievedPrice
func (mr *MockCfProjectCommandRepositoryMockRecorder) IncrementAchievedPrice(c, id, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementAchievedPrice", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).IncrementAchievedPrice), c, id, price)
}

// DecrementAchievedPrice mocks base method
func (m *MockCfProjectCommandRepository) DecrementAchievedPrice(c context.Context, id, price int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementAchievedPrice", c, id, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementAchievedPrice indicates an expected call of DecrementAchievedPrice
func (mr *MockCfProjectCommandRepositoryMockRecorder) DecrementAchievedPrice(c, id, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementAchievedPrice", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).DecrementAchievedPrice), c, id, price)
}

// MarkAsIsSentAchievementNoticeEmail mocks base method
func (m *MockCfProjectCommandRepository) MarkAsIsSentAchievementNoticeEmail(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsIsSentAchievementNoticeEmail", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsIsSentAchievementNoticeEmail indicates an expected call of MarkAsIsSentAchievementNoticeEmail
func (mr *MockCfProjectCommandRepositoryMockRecorder) MarkAsIsSentAchievementNoticeEmail(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsIsSentAchievementNoticeEmail", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).MarkAsIsSentAchievementNoticeEmail), id)
}

// MarkAsIsSentNewPostEmail mocks base method
func (m *MockCfProjectCommandRepository) MarkAsIsSentNewPostEmail(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsIsSentNewPostEmail", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsIsSentNewPostEmail indicates an expected call of MarkAsIsSentNewPostEmail
func (mr *MockCfProjectCommandRepositoryMockRecorder) MarkAsIsSentNewPostEmail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsIsSentNewPostEmail", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).MarkAsIsSentNewPostEmail), ctx, id)
}

// UpdateLatestPostID mocks base method
func (m *MockCfProjectCommandRepository) UpdateLatestPostID(ctx context.Context, id, postID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLatestPostID", ctx, id, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLatestPostID indicates an expected call of UpdateLatestPostID
func (mr *MockCfProjectCommandRepositoryMockRecorder) UpdateLatestPostID(ctx, id, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLatestPostID", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).UpdateLatestPostID), ctx, id, postID)
}

// UpdateFacebookCountByID mocks base method
func (m *MockCfProjectCommandRepository) UpdateFacebookCountByID(id, count int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFacebookCountByID", id, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFacebookCountByID indicates an expected call of UpdateFacebookCountByID
func (mr *MockCfProjectCommandRepositoryMockRecorder) UpdateFacebookCountByID(id, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFacebookCountByID", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).UpdateFacebookCountByID), id, count)
}

// UpdateTwitterCountByID mocks base method
func (m *MockCfProjectCommandRepository) UpdateTwitterCountByID(id, count int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTwitterCountByID", id, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTwitterCountByID indicates an expected call of UpdateTwitterCountByID
func (mr *MockCfProjectCommandRepositoryMockRecorder) UpdateTwitterCountByID(id, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTwitterCountByID", reflect.TypeOf((*MockCfProjectCommandRepository)(nil).UpdateTwitterCountByID), id, count)
}

// MockCfProjectQueryRepository is a mock of CfProjectQueryRepository interface
type MockCfProjectQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCfProjectQueryRepositoryMockRecorder
}

// MockCfProjectQueryRepositoryMockRecorder is the mock recorder for MockCfProjectQueryRepository
type MockCfProjectQueryRepositoryMockRecorder struct {
	mock *MockCfProjectQueryRepository
}

// NewMockCfProjectQueryRepository creates a new mock instance
func NewMockCfProjectQueryRepository(ctrl *gomock.Controller) *MockCfProjectQueryRepository {
	mock := &MockCfProjectQueryRepository{ctrl: ctrl}
	mock.recorder = &MockCfProjectQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCfProjectQueryRepository) EXPECT() *MockCfProjectQueryRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method
func (m *MockCfProjectQueryRepository) FindByID(id int) (*entity.CfProjectDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.CfProjectDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockCfProjectQueryRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCfProjectQueryRepository)(nil).FindByID), id)
}

// FindByLastID mocks base method
func (m *MockCfProjectQueryRepository) FindByLastID(lastID, limit int) ([]*entity.CfProjectTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLastID", lastID, limit)
	ret0, _ := ret[0].([]*entity.CfProjectTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLastID indicates an expected call of FindByLastID
func (mr *MockCfProjectQueryRepositoryMockRecorder) FindByLastID(lastID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLastID", reflect.TypeOf((*MockCfProjectQueryRepository)(nil).FindByLastID), lastID, limit)
}

// FindListByQuery mocks base method
func (m *MockCfProjectQueryRepository) FindListByQuery(query *query.FindCfProjectQuery) (*entity.CfProjectDetailList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByQuery", query)
	ret0, _ := ret[0].(*entity.CfProjectDetailList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByQuery indicates an expected call of FindListByQuery
func (mr *MockCfProjectQueryRepositoryMockRecorder) FindListByQuery(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByQuery", reflect.TypeOf((*MockCfProjectQueryRepository)(nil).FindListByQuery), query)
}

// FindSupportCommentListByCfProjectID mocks base method
func (m *MockCfProjectQueryRepository) FindSupportCommentListByCfProjectID(projectID, limit int) (*entity.CfProjectSupportCommentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSupportCommentListByCfProjectID", projectID, limit)
	ret0, _ := ret[0].(*entity.CfProjectSupportCommentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSupportCommentListByCfProjectID indicates an expected call of FindSupportCommentListByCfProjectID
func (mr *MockCfProjectQueryRepositoryMockRecorder) FindSupportCommentListByCfProjectID(projectID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSupportCommentListByCfProjectID", reflect.TypeOf((*MockCfProjectQueryRepository)(nil).FindSupportCommentListByCfProjectID), projectID, limit)
}

// FindNotSentAchievementNoticeEmailAndAchievedListByLastID mocks base method
func (m *MockCfProjectQueryRepository) FindNotSentAchievementNoticeEmailAndAchievedListByLastID(lastID, limit int) (*entity.CfProjectDetailList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNotSentAchievementNoticeEmailAndAchievedListByLastID", lastID, limit)
	ret0, _ := ret[0].(*entity.CfProjectDetailList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotSentAchievementNoticeEmailAndAchievedListByLastID indicates an expected call of FindNotSentAchievementNoticeEmailAndAchievedListByLastID
func (mr *MockCfProjectQueryRepositoryMockRecorder) FindNotSentAchievementNoticeEmailAndAchievedListByLastID(lastID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotSentAchievementNoticeEmailAndAchievedListByLastID", reflect.TypeOf((*MockCfProjectQueryRepository)(nil).FindNotSentAchievementNoticeEmailAndAchievedListByLastID), lastID, limit)
}

// FindNotSentNewPostNoticeEmailByLastID mocks base method
func (m *MockCfProjectQueryRepository) FindNotSentNewPostNoticeEmailByLastID(lastID, limit int) (*entity.CfProjectDetailList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNotSentNewPostNoticeEmailByLastID", lastID, limit)
	ret0, _ := ret[0].(*entity.CfProjectDetailList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotSentNewPostNoticeEmailByLastID indicates an expected call of FindNotSentNewPostNoticeEmailByLastID
func (mr *MockCfProjectQueryRepositoryMockRecorder) FindNotSentNewPostNoticeEmailByLastID(lastID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotSentNewPostNoticeEmailByLastID", reflect.TypeOf((*MockCfProjectQueryRepository)(nil).FindNotSentNewPostNoticeEmailByLastID), lastID, limit)
}

// FindSupportedListByUserID mocks base method
func (m *MockCfProjectQueryRepository) FindSupportedListByUserID(userID int, query *query.FindListPaginationQuery) (*entity.CfProjectDetailList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSupportedListByUserID", userID, query)
	ret0, _ := ret[0].(*entity.CfProjectDetailList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSupportedListByUserID indicates an expected call of FindSupportedListByUserID
func (mr *MockCfProjectQueryRepositoryMockRecorder) FindSupportedListByUserID(userID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSupportedListByUserID", reflect.TypeOf((*MockCfProjectQueryRepository)(nil).FindSupportedListByUserID), userID, query)
}

// IsSupported mocks base method
func (m *MockCfProjectQueryRepository) IsSupported(userID int, projectIDs []int) (map[int]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSupported", userID, projectIDs)
	ret0, _ := ret[0].(map[int]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSupported indicates an expected call of IsSupported
func (mr *MockCfProjectQueryRepositoryMockRecorder) IsSupported(userID, projectIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSupported", reflect.TypeOf((*MockCfProjectQueryRepository)(nil).IsSupported), userID, projectIDs)
}
