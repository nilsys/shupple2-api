// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/shipping.go

// Package mock_repository is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/stayway-corp/stayway-media-api/pkg/domain/entity"
)

// MockShippingCommandRepository is a mock of ShippingCommandRepository interface
type MockShippingCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShippingCommandRepositoryMockRecorder
}

// MockShippingCommandRepositoryMockRecorder is the mock recorder for MockShippingCommandRepository
type MockShippingCommandRepositoryMockRecorder struct {
	mock *MockShippingCommandRepository
}

// NewMockShippingCommandRepository creates a new mock instance
func NewMockShippingCommandRepository(ctrl *gomock.Controller) *MockShippingCommandRepository {
	mock := &MockShippingCommandRepository{ctrl: ctrl}
	mock.recorder = &MockShippingCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShippingCommandRepository) EXPECT() *MockShippingCommandRepositoryMockRecorder {
	return m.recorder
}

// StoreShippingAddress mocks base method
func (m *MockShippingCommandRepository) StoreShippingAddress(ctx context.Context, address *entity.ShippingAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreShippingAddress", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreShippingAddress indicates an expected call of StoreShippingAddress
func (mr *MockShippingCommandRepositoryMockRecorder) StoreShippingAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreShippingAddress", reflect.TypeOf((*MockShippingCommandRepository)(nil).StoreShippingAddress), ctx, address)
}

// MockShippingQueryRepository is a mock of ShippingQueryRepository interface
type MockShippingQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShippingQueryRepositoryMockRecorder
}

// MockShippingQueryRepositoryMockRecorder is the mock recorder for MockShippingQueryRepository
type MockShippingQueryRepositoryMockRecorder struct {
	mock *MockShippingQueryRepository
}

// NewMockShippingQueryRepository creates a new mock instance
func NewMockShippingQueryRepository(ctrl *gomock.Controller) *MockShippingQueryRepository {
	mock := &MockShippingQueryRepository{ctrl: ctrl}
	mock.recorder = &MockShippingQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShippingQueryRepository) EXPECT() *MockShippingQueryRepositoryMockRecorder {
	return m.recorder
}

// FindLatestShippingAddressByUserID mocks base method
func (m *MockShippingQueryRepository) FindLatestShippingAddressByUserID(c context.Context, userID int) (*entity.ShippingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestShippingAddressByUserID", c, userID)
	ret0, _ := ret[0].(*entity.ShippingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestShippingAddressByUserID indicates an expected call of FindLatestShippingAddressByUserID
func (mr *MockShippingQueryRepositoryMockRecorder) FindLatestShippingAddressByUserID(c, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestShippingAddressByUserID", reflect.TypeOf((*MockShippingQueryRepository)(nil).FindLatestShippingAddressByUserID), c, userID)
}
