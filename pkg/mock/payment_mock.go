// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/payment.go

// Package mock_repository is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/stayway-corp/stayway-media-api/pkg/domain/entity"
	query "github.com/stayway-corp/stayway-media-api/pkg/domain/model/query"
)

// MockPaymentQueryRepository is a mock of PaymentQueryRepository interface
type MockPaymentQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentQueryRepositoryMockRecorder
}

// MockPaymentQueryRepositoryMockRecorder is the mock recorder for MockPaymentQueryRepository
type MockPaymentQueryRepositoryMockRecorder struct {
	mock *MockPaymentQueryRepository
}

// NewMockPaymentQueryRepository creates a new mock instance
func NewMockPaymentQueryRepository(ctrl *gomock.Controller) *MockPaymentQueryRepository {
	mock := &MockPaymentQueryRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaymentQueryRepository) EXPECT() *MockPaymentQueryRepositoryMockRecorder {
	return m.recorder
}

// FindByUserID mocks base method
func (m *MockPaymentQueryRepository) FindByUserID(userID, projectID int, query *query.FindListPaginationQuery) (*entity.PaymentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", userID, projectID, query)
	ret0, _ := ret[0].(*entity.PaymentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID
func (mr *MockPaymentQueryRepositoryMockRecorder) FindByUserID(userID, projectID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockPaymentQueryRepository)(nil).FindByUserID), userID, projectID, query)
}

// FindByID mocks base method
func (m *MockPaymentQueryRepository) FindByID(ctx context.Context, id int) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockPaymentQueryRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPaymentQueryRepository)(nil).FindByID), ctx, id)
}

// FindTinyByID mocks base method
func (m *MockPaymentQueryRepository) FindTinyByID(id int) (*entity.PaymentTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTinyByID", id)
	ret0, _ := ret[0].(*entity.PaymentTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTinyByID indicates an expected call of FindTinyByID
func (mr *MockPaymentQueryRepositoryMockRecorder) FindTinyByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTinyByID", reflect.TypeOf((*MockPaymentQueryRepository)(nil).FindTinyByID), id)
}

// FindPaymentCfReturnGiftByPaymentIDAndCfReturnGift mocks base method
func (m *MockPaymentQueryRepository) FindPaymentCfReturnGiftByPaymentIDAndCfReturnGift(paymentID, cfReturnGiftID int) (*entity.PaymentCfReturnGift, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPaymentCfReturnGiftByPaymentIDAndCfReturnGift", paymentID, cfReturnGiftID)
	ret0, _ := ret[0].(*entity.PaymentCfReturnGift)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPaymentCfReturnGiftByPaymentIDAndCfReturnGift indicates an expected call of FindPaymentCfReturnGiftByPaymentIDAndCfReturnGift
func (mr *MockPaymentQueryRepositoryMockRecorder) FindPaymentCfReturnGiftByPaymentIDAndCfReturnGift(paymentID, cfReturnGiftID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPaymentCfReturnGiftByPaymentIDAndCfReturnGift", reflect.TypeOf((*MockPaymentQueryRepository)(nil).FindPaymentCfReturnGiftByPaymentIDAndCfReturnGift), paymentID, cfReturnGiftID)
}

// LockPaymentCfReturnGift mocks base method
func (m *MockPaymentQueryRepository) LockPaymentCfReturnGift(ctx context.Context, paymentID, cfReturnGiftID int) (*entity.PaymentCfReturnGift, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockPaymentCfReturnGift", ctx, paymentID, cfReturnGiftID)
	ret0, _ := ret[0].(*entity.PaymentCfReturnGift)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockPaymentCfReturnGift indicates an expected call of LockPaymentCfReturnGift
func (mr *MockPaymentQueryRepositoryMockRecorder) LockPaymentCfReturnGift(ctx, paymentID, cfReturnGiftID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockPaymentCfReturnGift", reflect.TypeOf((*MockPaymentQueryRepository)(nil).LockPaymentCfReturnGift), ctx, paymentID, cfReturnGiftID)
}

// MockPaymentCommandRepository is a mock of PaymentCommandRepository interface
type MockPaymentCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentCommandRepositoryMockRecorder
}

// MockPaymentCommandRepositoryMockRecorder is the mock recorder for MockPaymentCommandRepository
type MockPaymentCommandRepositoryMockRecorder struct {
	mock *MockPaymentCommandRepository
}

// NewMockPaymentCommandRepository creates a new mock instance
func NewMockPaymentCommandRepository(ctrl *gomock.Controller) *MockPaymentCommandRepository {
	mock := &MockPaymentCommandRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaymentCommandRepository) EXPECT() *MockPaymentCommandRepositoryMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockPaymentCommandRepository) Store(c context.Context, payment *entity.PaymentTiny) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", c, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockPaymentCommandRepositoryMockRecorder) Store(c, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockPaymentCommandRepository)(nil).Store), c, payment)
}

// StorePaymentReturnGiftList mocks base method
func (m *MockPaymentCommandRepository) StorePaymentReturnGiftList(c context.Context, list []*entity.PaymentCfReturnGiftTiny, paymentID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePaymentReturnGiftList", c, list, paymentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePaymentReturnGiftList indicates an expected call of StorePaymentReturnGiftList
func (mr *MockPaymentCommandRepositoryMockRecorder) StorePaymentReturnGiftList(c, list, paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePaymentReturnGiftList", reflect.TypeOf((*MockPaymentCommandRepository)(nil).StorePaymentReturnGiftList), c, list, paymentID)
}

// MarkPaymentCfReturnGiftAsCancel mocks base method
func (m *MockPaymentCommandRepository) MarkPaymentCfReturnGiftAsCancel(c context.Context, paymentID, cfReturnID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkPaymentCfReturnGiftAsCancel", c, paymentID, cfReturnID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkPaymentCfReturnGiftAsCancel indicates an expected call of MarkPaymentCfReturnGiftAsCancel
func (mr *MockPaymentCommandRepositoryMockRecorder) MarkPaymentCfReturnGiftAsCancel(c, paymentID, cfReturnID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkPaymentCfReturnGiftAsCancel", reflect.TypeOf((*MockPaymentCommandRepository)(nil).MarkPaymentCfReturnGiftAsCancel), c, paymentID, cfReturnID)
}

// MarkPaymentCfReturnGiftAsReserved mocks base method
func (m *MockPaymentCommandRepository) MarkPaymentCfReturnGiftAsReserved(c context.Context, paymentID, cfReturnGiftID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkPaymentCfReturnGiftAsReserved", c, paymentID, cfReturnGiftID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkPaymentCfReturnGiftAsReserved indicates an expected call of MarkPaymentCfReturnGiftAsReserved
func (mr *MockPaymentCommandRepositoryMockRecorder) MarkPaymentCfReturnGiftAsReserved(c, paymentID, cfReturnGiftID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkPaymentCfReturnGiftAsReserved", reflect.TypeOf((*MockPaymentCommandRepository)(nil).MarkPaymentCfReturnGiftAsReserved), c, paymentID, cfReturnGiftID)
}
