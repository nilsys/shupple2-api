// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/mail.go

// Package mock_repository is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/stayway-corp/stayway-media-api/pkg/domain/entity"
)

// MockMailCommandRepository is a mock of MailCommandRepository interface
type MockMailCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMailCommandRepositoryMockRecorder
}

// MockMailCommandRepositoryMockRecorder is the mock recorder for MockMailCommandRepository
type MockMailCommandRepositoryMockRecorder struct {
	mock *MockMailCommandRepository
}

// NewMockMailCommandRepository creates a new mock instance
func NewMockMailCommandRepository(ctrl *gomock.Controller) *MockMailCommandRepository {
	mock := &MockMailCommandRepository{ctrl: ctrl}
	mock.recorder = &MockMailCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMailCommandRepository) EXPECT() *MockMailCommandRepositoryMockRecorder {
	return m.recorder
}

// SendTemplateMail mocks base method
func (m *MockMailCommandRepository) SendTemplateMail(toEmails []string, template entity.MailTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTemplateMail", toEmails, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTemplateMail indicates an expected call of SendTemplateMail
func (mr *MockMailCommandRepositoryMockRecorder) SendTemplateMail(toEmails, template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTemplateMail", reflect.TypeOf((*MockMailCommandRepository)(nil).SendTemplateMail), toEmails, template)
}
