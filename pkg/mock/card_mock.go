// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/card.go

// Package mock_repository is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/stayway-corp/stayway-media-api/pkg/domain/entity"
)

// MockCardCommandRepository is a mock of CardCommandRepository interface
type MockCardCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardCommandRepositoryMockRecorder
}

// MockCardCommandRepositoryMockRecorder is the mock recorder for MockCardCommandRepository
type MockCardCommandRepositoryMockRecorder struct {
	mock *MockCardCommandRepository
}

// NewMockCardCommandRepository creates a new mock instance
func NewMockCardCommandRepository(ctrl *gomock.Controller) *MockCardCommandRepository {
	mock := &MockCardCommandRepository{ctrl: ctrl}
	mock.recorder = &MockCardCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCardCommandRepository) EXPECT() *MockCardCommandRepositoryMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockCardCommandRepository) Store(c context.Context, card *entity.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", c, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockCardCommandRepositoryMockRecorder) Store(c, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCardCommandRepository)(nil).Store), c, card)
}

// Delete mocks base method
func (m *MockCardCommandRepository) Delete(c context.Context, card *entity.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCardCommandRepositoryMockRecorder) Delete(c, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCardCommandRepository)(nil).Delete), c, card)
}

// MockCardQueryRepository is a mock of CardQueryRepository interface
type MockCardQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardQueryRepositoryMockRecorder
}

// MockCardQueryRepositoryMockRecorder is the mock recorder for MockCardQueryRepository
type MockCardQueryRepositoryMockRecorder struct {
	mock *MockCardQueryRepository
}

// NewMockCardQueryRepository creates a new mock instance
func NewMockCardQueryRepository(ctrl *gomock.Controller) *MockCardQueryRepository {
	mock := &MockCardQueryRepository{ctrl: ctrl}
	mock.recorder = &MockCardQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCardQueryRepository) EXPECT() *MockCardQueryRepositoryMockRecorder {
	return m.recorder
}

// FindLatestByUserID mocks base method
func (m *MockCardQueryRepository) FindLatestByUserID(c context.Context, userID int) (*entity.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestByUserID", c, userID)
	ret0, _ := ret[0].(*entity.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestByUserID indicates an expected call of FindLatestByUserID
func (mr *MockCardQueryRepositoryMockRecorder) FindLatestByUserID(c, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestByUserID", reflect.TypeOf((*MockCardQueryRepository)(nil).FindLatestByUserID), c, userID)
}

// FindByID mocks base method
func (m *MockCardQueryRepository) FindByID(id int) (*entity.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockCardQueryRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCardQueryRepository)(nil).FindByID), id)
}
