// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/payjp/customer.go

// Package mock_payjp is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	payjp "github.com/payjp/payjp-go/v1"
)

// MockCustomerCommandRepository is a mock of CustomerCommandRepository interface
type MockCustomerCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerCommandRepositoryMockRecorder
}

// MockCustomerCommandRepositoryMockRecorder is the mock recorder for MockCustomerCommandRepository
type MockCustomerCommandRepositoryMockRecorder struct {
	mock *MockCustomerCommandRepository
}

// NewMockCustomerCommandRepository creates a new mock instance
func NewMockCustomerCommandRepository(ctrl *gomock.Controller) *MockCustomerCommandRepository {
	mock := &MockCustomerCommandRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomerCommandRepository) EXPECT() *MockCustomerCommandRepositoryMockRecorder {
	return m.recorder
}

// StoreCustomer mocks base method
func (m *MockCustomerCommandRepository) StoreCustomer(customerID, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCustomer", customerID, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCustomer indicates an expected call of StoreCustomer
func (mr *MockCustomerCommandRepositoryMockRecorder) StoreCustomer(customerID, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCustomer", reflect.TypeOf((*MockCustomerCommandRepository)(nil).StoreCustomer), customerID, email)
}

// UpdateID mocks base method
func (m *MockCustomerCommandRepository) UpdateID(customerID, newCustomerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateID", customerID, newCustomerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateID indicates an expected call of UpdateID
func (mr *MockCustomerCommandRepositoryMockRecorder) UpdateID(customerID, newCustomerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateID", reflect.TypeOf((*MockCustomerCommandRepository)(nil).UpdateID), customerID, newCustomerID)
}

// MockCustomerQueryRepository is a mock of CustomerQueryRepository interface
type MockCustomerQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerQueryRepositoryMockRecorder
}

// MockCustomerQueryRepositoryMockRecorder is the mock recorder for MockCustomerQueryRepository
type MockCustomerQueryRepositoryMockRecorder struct {
	mock *MockCustomerQueryRepository
}

// NewMockCustomerQueryRepository creates a new mock instance
func NewMockCustomerQueryRepository(ctrl *gomock.Controller) *MockCustomerQueryRepository {
	mock := &MockCustomerQueryRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomerQueryRepository) EXPECT() *MockCustomerQueryRepositoryMockRecorder {
	return m.recorder
}

// FindCustomer mocks base method
func (m *MockCustomerQueryRepository) FindCustomer(customerID string) (*payjp.CustomerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCustomer", customerID)
	ret0, _ := ret[0].(*payjp.CustomerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCustomer indicates an expected call of FindCustomer
func (mr *MockCustomerQueryRepositoryMockRecorder) FindCustomer(customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCustomer", reflect.TypeOf((*MockCustomerQueryRepository)(nil).FindCustomer), customerID)
}
