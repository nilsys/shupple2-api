// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/payjp/card.go

// Package mock_payjp is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	payjp "github.com/payjp/payjp-go/v1"
)

// MockCardCommandRepository is a mock of CardCommandRepository interface
type MockCardCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardCommandRepositoryMockRecorder
}

// MockCardCommandRepositoryMockRecorder is the mock recorder for MockCardCommandRepository
type MockCardCommandRepositoryMockRecorder struct {
	mock *MockCardCommandRepository
}

// NewMockCardCommandRepository creates a new mock instance
func NewMockCardCommandRepository(ctrl *gomock.Controller) *MockCardCommandRepository {
	mock := &MockCardCommandRepository{ctrl: ctrl}
	mock.recorder = &MockCardCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCardCommandRepository) EXPECT() *MockCardCommandRepositoryMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockCardCommandRepository) Register(customerID, cardToken string) (*payjp.CardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", customerID, cardToken)
	ret0, _ := ret[0].(*payjp.CardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockCardCommandRepositoryMockRecorder) Register(customerID, cardToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockCardCommandRepository)(nil).Register), customerID, cardToken)
}

// Delete mocks base method
func (m *MockCardCommandRepository) Delete(customerID, cardID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", customerID, cardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCardCommandRepositoryMockRecorder) Delete(customerID, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCardCommandRepository)(nil).Delete), customerID, cardID)
}
