// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/user.go

// Package mock_repository is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	cognitoidentityprovider "github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
	gomock "github.com/golang/mock/gomock"
	entity "github.com/stayway-corp/stayway-media-api/pkg/domain/entity"
	command "github.com/stayway-corp/stayway-media-api/pkg/domain/model/command"
	query "github.com/stayway-corp/stayway-media-api/pkg/domain/model/query"
)

// MockUserCommandRepository is a mock of UserCommandRepository interface
type MockUserCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserCommandRepositoryMockRecorder
}

// MockUserCommandRepositoryMockRecorder is the mock recorder for MockUserCommandRepository
type MockUserCommandRepositoryMockRecorder struct {
	mock *MockUserCommandRepository
}

// NewMockUserCommandRepository creates a new mock instance
func NewMockUserCommandRepository(ctrl *gomock.Controller) *MockUserCommandRepository {
	mock := &MockUserCommandRepository{ctrl: ctrl}
	mock.recorder = &MockUserCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserCommandRepository) EXPECT() *MockUserCommandRepositoryMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockUserCommandRepository) Store(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockUserCommandRepositoryMockRecorder) Store(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUserCommandRepository)(nil).Store), ctx, user)
}

// Update mocks base method
func (m *MockUserCommandRepository) Update(user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserCommandRepositoryMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserCommandRepository)(nil).Update), user)
}

// StoreWithAvatar mocks base method
func (m *MockUserCommandRepository) StoreWithAvatar(user *entity.User, avatar io.Reader, contentType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreWithAvatar", user, avatar, contentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreWithAvatar indicates an expected call of StoreWithAvatar
func (mr *MockUserCommandRepositoryMockRecorder) StoreWithAvatar(user, avatar, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreWithAvatar", reflect.TypeOf((*MockUserCommandRepository)(nil).StoreWithAvatar), user, avatar, contentType)
}

// UpdateWordpressID mocks base method
func (m *MockUserCommandRepository) UpdateWordpressID(userID, wordpressUserID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWordpressID", userID, wordpressUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWordpressID indicates an expected call of UpdateWordpressID
func (mr *MockUserCommandRepositoryMockRecorder) UpdateWordpressID(userID, wordpressUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWordpressID", reflect.TypeOf((*MockUserCommandRepository)(nil).UpdateWordpressID), userID, wordpressUserID)
}

// StoreFollow mocks base method
func (m *MockUserCommandRepository) StoreFollow(c context.Context, following *entity.UserFollowing, followed *entity.UserFollowed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreFollow", c, following, followed)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreFollow indicates an expected call of StoreFollow
func (mr *MockUserCommandRepositoryMockRecorder) StoreFollow(c, following, followed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFollow", reflect.TypeOf((*MockUserCommandRepository)(nil).StoreFollow), c, following, followed)
}

// DeleteFollow mocks base method
func (m *MockUserCommandRepository) DeleteFollow(userID, targetID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFollow", userID, targetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFollow indicates an expected call of DeleteFollow
func (mr *MockUserCommandRepositoryMockRecorder) DeleteFollow(userID, targetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFollow", reflect.TypeOf((*MockUserCommandRepository)(nil).DeleteFollow), userID, targetID)
}

// PersistUserImage mocks base method
func (m *MockUserCommandRepository) PersistUserImage(cmd *command.UpdateUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistUserImage", cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistUserImage indicates an expected call of PersistUserImage
func (mr *MockUserCommandRepositoryMockRecorder) PersistUserImage(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistUserImage", reflect.TypeOf((*MockUserCommandRepository)(nil).PersistUserImage), cmd)
}

// MockUserQueryRepository is a mock of UserQueryRepository interface
type MockUserQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserQueryRepositoryMockRecorder
}

// MockUserQueryRepositoryMockRecorder is the mock recorder for MockUserQueryRepository
type MockUserQueryRepositoryMockRecorder struct {
	mock *MockUserQueryRepository
}

// NewMockUserQueryRepository creates a new mock instance
func NewMockUserQueryRepository(ctrl *gomock.Controller) *MockUserQueryRepository {
	mock := &MockUserQueryRepository{ctrl: ctrl}
	mock.recorder = &MockUserQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserQueryRepository) EXPECT() *MockUserQueryRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method
func (m *MockUserQueryRepository) FindByID(id int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockUserQueryRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserQueryRepository)(nil).FindByID), id)
}

// FindByUIDs mocks base method
func (m *MockUserQueryRepository) FindByUIDs(uIDs []string) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUIDs", uIDs)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUIDs indicates an expected call of FindByUIDs
func (mr *MockUserQueryRepositoryMockRecorder) FindByUIDs(uIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUIDs", reflect.TypeOf((*MockUserQueryRepository)(nil).FindByUIDs), uIDs)
}

// FindByCognitoID mocks base method
func (m *MockUserQueryRepository) FindByCognitoID(cognitoID string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCognitoID", cognitoID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCognitoID indicates an expected call of FindByCognitoID
func (mr *MockUserQueryRepositoryMockRecorder) FindByCognitoID(cognitoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCognitoID", reflect.TypeOf((*MockUserQueryRepository)(nil).FindByCognitoID), cognitoID)
}

// FindByWordpressID mocks base method
func (m *MockUserQueryRepository) FindByWordpressID(id int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByWordpressID", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByWordpressID indicates an expected call of FindByWordpressID
func (mr *MockUserQueryRepositoryMockRecorder) FindByWordpressID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByWordpressID", reflect.TypeOf((*MockUserQueryRepository)(nil).FindByWordpressID), id)
}

// FindByMigrationCode mocks base method
func (m *MockUserQueryRepository) FindByMigrationCode(code string) (*entity.UserTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMigrationCode", code)
	ret0, _ := ret[0].(*entity.UserTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMigrationCode indicates an expected call of FindByMigrationCode
func (mr *MockUserQueryRepositoryMockRecorder) FindByMigrationCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMigrationCode", reflect.TypeOf((*MockUserQueryRepository)(nil).FindByMigrationCode), code)
}

// FindUserRankingListByParams mocks base method
func (m *MockUserQueryRepository) FindUserRankingListByParams(query *query.FindUserRankingListQuery) ([]*entity.UserDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserRankingListByParams", query)
	ret0, _ := ret[0].([]*entity.UserDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserRankingListByParams indicates an expected call of FindUserRankingListByParams
func (mr *MockUserQueryRepositoryMockRecorder) FindUserRankingListByParams(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserRankingListByParams", reflect.TypeOf((*MockUserQueryRepository)(nil).FindUserRankingListByParams), query)
}

// FindByUID mocks base method
func (m *MockUserQueryRepository) FindByUID(uid string) (*entity.UserTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUID", uid)
	ret0, _ := ret[0].(*entity.UserTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUID indicates an expected call of FindByUID
func (mr *MockUserQueryRepositoryMockRecorder) FindByUID(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUID", reflect.TypeOf((*MockUserQueryRepository)(nil).FindByUID), uid)
}

// FindUserDetailWithCountByID mocks base method
func (m *MockUserQueryRepository) FindUserDetailWithCountByID(id int) (*entity.UserDetailWithMediaCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserDetailWithCountByID", id)
	ret0, _ := ret[0].(*entity.UserDetailWithMediaCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserDetailWithCountByID indicates an expected call of FindUserDetailWithCountByID
func (mr *MockUserQueryRepositoryMockRecorder) FindUserDetailWithCountByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserDetailWithCountByID", reflect.TypeOf((*MockUserQueryRepository)(nil).FindUserDetailWithCountByID), id)
}

// IsFollowing mocks base method
func (m *MockUserQueryRepository) IsFollowing(baseUserID int, userIDs []int) (map[int]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFollowing", baseUserID, userIDs)
	ret0, _ := ret[0].(map[int]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFollowing indicates an expected call of IsFollowing
func (mr *MockUserQueryRepositoryMockRecorder) IsFollowing(baseUserID, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollowing", reflect.TypeOf((*MockUserQueryRepository)(nil).IsFollowing), baseUserID, userIDs)
}

// FindRecommendFollowUserList mocks base method
func (m *MockUserQueryRepository) FindRecommendFollowUserList(interestIDs []int) ([]*entity.UserTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRecommendFollowUserList", interestIDs)
	ret0, _ := ret[0].([]*entity.UserTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRecommendFollowUserList indicates an expected call of FindRecommendFollowUserList
func (mr *MockUserQueryRepositoryMockRecorder) FindRecommendFollowUserList(interestIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRecommendFollowUserList", reflect.TypeOf((*MockUserQueryRepository)(nil).FindRecommendFollowUserList), interestIDs)
}

// IsExistByUID mocks base method
func (m *MockUserQueryRepository) IsExistByUID(uid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistByUID", uid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExistByUID indicates an expected call of IsExistByUID
func (mr *MockUserQueryRepositoryMockRecorder) IsExistByUID(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistByUID", reflect.TypeOf((*MockUserQueryRepository)(nil).IsExistByUID), uid)
}

// FindByCognitoUserName mocks base method
func (m *MockUserQueryRepository) FindByCognitoUserName(cognitoUserName []string) ([]*entity.UserTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCognitoUserName", cognitoUserName)
	ret0, _ := ret[0].([]*entity.UserTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCognitoUserName indicates an expected call of FindByCognitoUserName
func (mr *MockUserQueryRepositoryMockRecorder) FindByCognitoUserName(cognitoUserName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCognitoUserName", reflect.TypeOf((*MockUserQueryRepository)(nil).FindByCognitoUserName), cognitoUserName)
}

// SearchByNameOrUID mocks base method
func (m *MockUserQueryRepository) SearchByNameOrUID(name string) ([]*entity.UserTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByNameOrUID", name)
	ret0, _ := ret[0].([]*entity.UserTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByNameOrUID indicates an expected call of SearchByNameOrUID
func (mr *MockUserQueryRepositoryMockRecorder) SearchByNameOrUID(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByNameOrUID", reflect.TypeOf((*MockUserQueryRepository)(nil).SearchByNameOrUID), name)
}

// FindFollowingByID mocks base method
func (m *MockUserQueryRepository) FindFollowingByID(query *query.FindFollowUser) ([]*entity.UserTinyWithIsFollow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFollowingByID", query)
	ret0, _ := ret[0].([]*entity.UserTinyWithIsFollow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFollowingByID indicates an expected call of FindFollowingByID
func (mr *MockUserQueryRepositoryMockRecorder) FindFollowingByID(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFollowingByID", reflect.TypeOf((*MockUserQueryRepository)(nil).FindFollowingByID), query)
}

// FindFollowedByID mocks base method
func (m *MockUserQueryRepository) FindFollowedByID(query *query.FindFollowUser) ([]*entity.UserTinyWithIsFollow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFollowedByID", query)
	ret0, _ := ret[0].([]*entity.UserTinyWithIsFollow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFollowedByID indicates an expected call of FindFollowedByID
func (mr *MockUserQueryRepositoryMockRecorder) FindFollowedByID(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFollowedByID", reflect.TypeOf((*MockUserQueryRepository)(nil).FindFollowedByID), query)
}

// FindFollowingWithIsFollowByID mocks base method
func (m *MockUserQueryRepository) FindFollowingWithIsFollowByID(userID int, query *query.FindFollowUser) ([]*entity.UserTinyWithIsFollow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFollowingWithIsFollowByID", userID, query)
	ret0, _ := ret[0].([]*entity.UserTinyWithIsFollow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFollowingWithIsFollowByID indicates an expected call of FindFollowingWithIsFollowByID
func (mr *MockUserQueryRepositoryMockRecorder) FindFollowingWithIsFollowByID(userID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFollowingWithIsFollowByID", reflect.TypeOf((*MockUserQueryRepository)(nil).FindFollowingWithIsFollowByID), userID, query)
}

// FindFollowedWithIsFollowByID mocks base method
func (m *MockUserQueryRepository) FindFollowedWithIsFollowByID(userID int, query *query.FindFollowUser) ([]*entity.UserTinyWithIsFollow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFollowedWithIsFollowByID", userID, query)
	ret0, _ := ret[0].([]*entity.UserTinyWithIsFollow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFollowedWithIsFollowByID indicates an expected call of FindFollowedWithIsFollowByID
func (mr *MockUserQueryRepositoryMockRecorder) FindFollowedWithIsFollowByID(userID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFollowedWithIsFollowByID", reflect.TypeOf((*MockUserQueryRepository)(nil).FindFollowedWithIsFollowByID), userID, query)
}

// FindFavoritePostUser mocks base method
func (m *MockUserQueryRepository) FindFavoritePostUser(postID int, query *query.FindListPaginationQuery) ([]*entity.UserTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFavoritePostUser", postID, query)
	ret0, _ := ret[0].([]*entity.UserTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFavoritePostUser indicates an expected call of FindFavoritePostUser
func (mr *MockUserQueryRepositoryMockRecorder) FindFavoritePostUser(postID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFavoritePostUser", reflect.TypeOf((*MockUserQueryRepository)(nil).FindFavoritePostUser), postID, query)
}

// FindFavoriteReviewUser mocks base method
func (m *MockUserQueryRepository) FindFavoriteReviewUser(reviewID int, query *query.FindListPaginationQuery) ([]*entity.UserTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFavoriteReviewUser", reviewID, query)
	ret0, _ := ret[0].([]*entity.UserTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFavoriteReviewUser indicates an expected call of FindFavoriteReviewUser
func (mr *MockUserQueryRepositoryMockRecorder) FindFavoriteReviewUser(reviewID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFavoriteReviewUser", reflect.TypeOf((*MockUserQueryRepository)(nil).FindFavoriteReviewUser), reviewID, query)
}

// FindFavoriteComicUser mocks base method
func (m *MockUserQueryRepository) FindFavoriteComicUser(comicID int, query *query.FindListPaginationQuery) ([]*entity.UserTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFavoriteComicUser", comicID, query)
	ret0, _ := ret[0].([]*entity.UserTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFavoriteComicUser indicates an expected call of FindFavoriteComicUser
func (mr *MockUserQueryRepositoryMockRecorder) FindFavoriteComicUser(comicID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFavoriteComicUser", reflect.TypeOf((*MockUserQueryRepository)(nil).FindFavoriteComicUser), comicID, query)
}

// FindFavoriteVlogUser mocks base method
func (m *MockUserQueryRepository) FindFavoriteVlogUser(vlogID int, query *query.FindListPaginationQuery) ([]*entity.UserTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFavoriteVlogUser", vlogID, query)
	ret0, _ := ret[0].([]*entity.UserTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFavoriteVlogUser indicates an expected call of FindFavoriteVlogUser
func (mr *MockUserQueryRepositoryMockRecorder) FindFavoriteVlogUser(vlogID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFavoriteVlogUser", reflect.TypeOf((*MockUserQueryRepository)(nil).FindFavoriteVlogUser), vlogID, query)
}

// FindFavoritePostUserByUserID mocks base method
func (m *MockUserQueryRepository) FindFavoritePostUserByUserID(postID, userID int, query *query.FindListPaginationQuery) ([]*entity.UserTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFavoritePostUserByUserID", postID, userID, query)
	ret0, _ := ret[0].([]*entity.UserTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFavoritePostUserByUserID indicates an expected call of FindFavoritePostUserByUserID
func (mr *MockUserQueryRepositoryMockRecorder) FindFavoritePostUserByUserID(postID, userID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFavoritePostUserByUserID", reflect.TypeOf((*MockUserQueryRepository)(nil).FindFavoritePostUserByUserID), postID, userID, query)
}

// FindFavoriteReviewUserByUserID mocks base method
func (m *MockUserQueryRepository) FindFavoriteReviewUserByUserID(reviewID, userID int, query *query.FindListPaginationQuery) ([]*entity.UserTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFavoriteReviewUserByUserID", reviewID, userID, query)
	ret0, _ := ret[0].([]*entity.UserTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFavoriteReviewUserByUserID indicates an expected call of FindFavoriteReviewUserByUserID
func (mr *MockUserQueryRepositoryMockRecorder) FindFavoriteReviewUserByUserID(reviewID, userID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFavoriteReviewUserByUserID", reflect.TypeOf((*MockUserQueryRepository)(nil).FindFavoriteReviewUserByUserID), reviewID, userID, query)
}

// FindFavoriteVlogUserByUserID mocks base method
func (m *MockUserQueryRepository) FindFavoriteVlogUserByUserID(vlogID, userID int, query *query.FindListPaginationQuery) ([]*entity.UserTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFavoriteVlogUserByUserID", vlogID, userID, query)
	ret0, _ := ret[0].([]*entity.UserTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFavoriteVlogUserByUserID indicates an expected call of FindFavoriteVlogUserByUserID
func (mr *MockUserQueryRepositoryMockRecorder) FindFavoriteVlogUserByUserID(vlogID, userID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFavoriteVlogUserByUserID", reflect.TypeOf((*MockUserQueryRepository)(nil).FindFavoriteVlogUserByUserID), vlogID, userID, query)
}

// FindFavoriteComicUserByUserID mocks base method
func (m *MockUserQueryRepository) FindFavoriteComicUserByUserID(comicID, userID int, query *query.FindListPaginationQuery) ([]*entity.UserTiny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFavoriteComicUserByUserID", comicID, userID, query)
	ret0, _ := ret[0].([]*entity.UserTiny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFavoriteComicUserByUserID indicates an expected call of FindFavoriteComicUserByUserID
func (mr *MockUserQueryRepositoryMockRecorder) FindFavoriteComicUserByUserID(comicID, userID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFavoriteComicUserByUserID", reflect.TypeOf((*MockUserQueryRepository)(nil).FindFavoriteComicUserByUserID), comicID, userID, query)
}

// FindCfProjectSupporterByCfProjectID mocks base method
func (m *MockUserQueryRepository) FindCfProjectSupporterByCfProjectID(cfProjectID int) (*entity.UserTinyList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCfProjectSupporterByCfProjectID", cfProjectID)
	ret0, _ := ret[0].(*entity.UserTinyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCfProjectSupporterByCfProjectID indicates an expected call of FindCfProjectSupporterByCfProjectID
func (mr *MockUserQueryRepositoryMockRecorder) FindCfProjectSupporterByCfProjectID(cfProjectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCfProjectSupporterByCfProjectID", reflect.TypeOf((*MockUserQueryRepository)(nil).FindCfProjectSupporterByCfProjectID), cfProjectID)
}

// FindConfirmedUserTypeByPhoneNumberFromCognito mocks base method
func (m *MockUserQueryRepository) FindConfirmedUserTypeByPhoneNumberFromCognito(number string) ([]*cognitoidentityprovider.UserType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindConfirmedUserTypeByPhoneNumberFromCognito", number)
	ret0, _ := ret[0].([]*cognitoidentityprovider.UserType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindConfirmedUserTypeByPhoneNumberFromCognito indicates an expected call of FindConfirmedUserTypeByPhoneNumberFromCognito
func (mr *MockUserQueryRepositoryMockRecorder) FindConfirmedUserTypeByPhoneNumberFromCognito(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindConfirmedUserTypeByPhoneNumberFromCognito", reflect.TypeOf((*MockUserQueryRepository)(nil).FindConfirmedUserTypeByPhoneNumberFromCognito), number)
}
