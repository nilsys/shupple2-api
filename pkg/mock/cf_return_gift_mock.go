// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/cf_return_gift.go

// Package mock_repository is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/stayway-corp/stayway-media-api/pkg/domain/entity"
)

// MockCfReturnGiftCommandRepository is a mock of CfReturnGiftCommandRepository interface
type MockCfReturnGiftCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCfReturnGiftCommandRepositoryMockRecorder
}

// MockCfReturnGiftCommandRepositoryMockRecorder is the mock recorder for MockCfReturnGiftCommandRepository
type MockCfReturnGiftCommandRepositoryMockRecorder struct {
	mock *MockCfReturnGiftCommandRepository
}

// NewMockCfReturnGiftCommandRepository creates a new mock instance
func NewMockCfReturnGiftCommandRepository(ctrl *gomock.Controller) *MockCfReturnGiftCommandRepository {
	mock := &MockCfReturnGiftCommandRepository{ctrl: ctrl}
	mock.recorder = &MockCfReturnGiftCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCfReturnGiftCommandRepository) EXPECT() *MockCfReturnGiftCommandRepositoryMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockCfReturnGiftCommandRepository) Store(arg0 context.Context, arg1 *entity.CfReturnGift) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockCfReturnGiftCommandRepositoryMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockCfReturnGiftCommandRepository)(nil).Store), arg0, arg1)
}

// LockByIDs mocks base method
func (m *MockCfReturnGiftCommandRepository) LockByIDs(c context.Context, ids []int) (*entity.CfReturnGiftList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockByIDs", c, ids)
	ret0, _ := ret[0].(*entity.CfReturnGiftList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockByIDs indicates an expected call of LockByIDs
func (mr *MockCfReturnGiftCommandRepositoryMockRecorder) LockByIDs(c, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockByIDs", reflect.TypeOf((*MockCfReturnGiftCommandRepository)(nil).LockByIDs), c, ids)
}

// UndeleteByID mocks base method
func (m *MockCfReturnGiftCommandRepository) UndeleteByID(c context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndeleteByID", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UndeleteByID indicates an expected call of UndeleteByID
func (mr *MockCfReturnGiftCommandRepositoryMockRecorder) UndeleteByID(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndeleteByID", reflect.TypeOf((*MockCfReturnGiftCommandRepository)(nil).UndeleteByID), c, id)
}

// DeleteByID mocks base method
func (m *MockCfReturnGiftCommandRepository) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockCfReturnGiftCommandRepositoryMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockCfReturnGiftCommandRepository)(nil).DeleteByID), id)
}

// MockCfReturnGiftQueryRepository is a mock of CfReturnGiftQueryRepository interface
type MockCfReturnGiftQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCfReturnGiftQueryRepositoryMockRecorder
}

// MockCfReturnGiftQueryRepositoryMockRecorder is the mock recorder for MockCfReturnGiftQueryRepository
type MockCfReturnGiftQueryRepositoryMockRecorder struct {
	mock *MockCfReturnGiftQueryRepository
}

// NewMockCfReturnGiftQueryRepository creates a new mock instance
func NewMockCfReturnGiftQueryRepository(ctrl *gomock.Controller) *MockCfReturnGiftQueryRepository {
	mock := &MockCfReturnGiftQueryRepository{ctrl: ctrl}
	mock.recorder = &MockCfReturnGiftQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCfReturnGiftQueryRepository) EXPECT() *MockCfReturnGiftQueryRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method
func (m *MockCfReturnGiftQueryRepository) FindByID(id int) (*entity.CfReturnGift, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.CfReturnGift)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockCfReturnGiftQueryRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCfReturnGiftQueryRepository)(nil).FindByID), id)
}

// FindSoldCountByReturnGiftIDs mocks base method
func (m *MockCfReturnGiftQueryRepository) FindSoldCountByReturnGiftIDs(c context.Context, ids []int) (*entity.CfReturnGiftSoldCountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSoldCountByReturnGiftIDs", c, ids)
	ret0, _ := ret[0].(*entity.CfReturnGiftSoldCountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSoldCountByReturnGiftIDs indicates an expected call of FindSoldCountByReturnGiftIDs
func (mr *MockCfReturnGiftQueryRepositoryMockRecorder) FindSoldCountByReturnGiftIDs(c, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSoldCountByReturnGiftIDs", reflect.TypeOf((*MockCfReturnGiftQueryRepository)(nil).FindSoldCountByReturnGiftIDs), c, ids)
}

// FindByCfProjectID mocks base method
func (m *MockCfReturnGiftQueryRepository) FindByCfProjectID(projectID int) (*entity.CfReturnGiftWithCountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCfProjectID", projectID)
	ret0, _ := ret[0].(*entity.CfReturnGiftWithCountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCfProjectID indicates an expected call of FindByCfProjectID
func (mr *MockCfReturnGiftQueryRepositoryMockRecorder) FindByCfProjectID(projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCfProjectID", reflect.TypeOf((*MockCfReturnGiftQueryRepository)(nil).FindByCfProjectID), projectID)
}
