// Code generated by go-enum
// DO NOT EDIT!

package config

import (
	"fmt"
)

const (
	// EnvDev is a Env of type Dev
	EnvDev Env = iota
	// EnvStg is a Env of type Stg
	EnvStg
	// EnvPrd is a Env of type Prd
	EnvPrd
)

const _EnvName = "devstgprd"

var _EnvMap = map[Env]string{
	0: _EnvName[0:3],
	1: _EnvName[3:6],
	2: _EnvName[6:9],
}

// String implements the Stringer interface.
func (x Env) String() string {
	if str, ok := _EnvMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Env(%d)", x)
}

var _EnvValue = map[string]Env{
	_EnvName[0:3]: 0,
	_EnvName[3:6]: 1,
	_EnvName[6:9]: 2,
}

// ParseEnv attempts to convert a string to a Env
func ParseEnv(name string) (Env, error) {
	if x, ok := _EnvValue[name]; ok {
		return x, nil
	}
	return Env(0), fmt.Errorf("%s is not a valid Env", name)
}

// MarshalText implements the text marshaller method
func (x Env) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Env) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseEnv(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
