// Code generated by go-enum
// DO NOT EDIT!

package model

import (
	"fmt"
)

const (
	// CategoryTypeAreaGroup is a CategoryType of type AreaGroup
	CategoryTypeAreaGroup CategoryType = iota
	// CategoryTypeArea is a CategoryType of type Area
	CategoryTypeArea
	// CategoryTypeSubArea is a CategoryType of type SubArea
	ategoryTypeSubArea
	// CategoryTypeSubSubArea is a CategoryType of type SubSubArea
	CategoryTypeSubSubArea
	// CategoryTypeTheme is a CategoryType of type Theme
	CategoryTypeTheme
)

const _CategoryTypeName = "AreaGroupAreaSubAreaSubSubAreaTheme"

var _CategoryTypeMap = map[CategoryType]string{
	0: _CategoryTypeName[0:9],
	1: _CategoryTypeName[9:13],
	2: _CategoryTypeName[13:20],
	3: _CategoryTypeName[20:30],
	4: _CategoryTypeName[30:35],
}

// String implements the Stringer interface.
func (x CategoryType) String() string {
	if str, ok := _CategoryTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("CategoryType(%d)", x)
}

var _CategoryTypeValue = map[string]CategoryType{
	_CategoryTypeName[0:9]:   0,
	_CategoryTypeName[9:13]:  1,
	_CategoryTypeName[13:20]: 2,
	_CategoryTypeName[20:30]: 3,
	_CategoryTypeName[30:35]: 4,
}

// ParseCategoryType attempts to convert a string to a CategoryType
func ParseCategoryType(name string) (CategoryType, error) {
	if x, ok := _CategoryTypeValue[name]; ok {
		return x, nil
	}
	return CategoryType(0), fmt.Errorf("%s is not a valid CategoryType", name)
}

// MarshalText implements the text marshaller method
func (x CategoryType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *CategoryType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCategoryType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// GenderMale is a Gender of type Male
	GenderMale Gender = iota
	// GenderFemale is a Gender of type Female
	GenderFemale
)

const _GenderName = "MaleFemale"

var _GenderMap = map[Gender]string{
	0: _GenderName[0:4],
	1: _GenderName[4:10],
}

// String implements the Stringer interface.
func (x Gender) String() string {
	if str, ok := _GenderMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Gender(%d)", x)
}

var _GenderValue = map[string]Gender{
	_GenderName[0:4]:  0,
	_GenderName[4:10]: 1,
}

// ParseGender attempts to convert a string to a Gender
func ParseGender(name string) (Gender, error) {
	if x, ok := _GenderValue[name]; ok {
		return x, nil
	}
	return Gender(0), fmt.Errorf("%s is not a valid Gender", name)
}

// MarshalText implements the text marshaller method
func (x Gender) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Gender) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseGender(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// SortByNEW is a SortBy of type NEW
	SortByNEW SortBy = iota
	// SortByRANKING is a SortBy of type RANKING
	SortByRANKING
)

const _SortByName = "NEWRANKING"

var _SortByMap = map[SortBy]string{
	0: _SortByName[0:3],
	1: _SortByName[3:10],
}

// String implements the Stringer interface.
func (x SortBy) String() string {
	if str, ok := _SortByMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SortBy(%d)", x)
}

var _SortByValue = map[string]SortBy{
	_SortByName[0:3]:  0,
	_SortByName[3:10]: 1,
}

// ParseSortBy attempts to convert a string to a SortBy
func ParseSortBy(name string) (SortBy, error) {
	if x, ok := _SortByValue[name]; ok {
		return x, nil
	}
	return SortBy(0), fmt.Errorf("%s is not a valid SortBy", name)
}

// MarshalText implements the text marshaller method
func (x SortBy) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *SortBy) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseSortBy(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
