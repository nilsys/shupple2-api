// Code generated by go-enum
// DO NOT EDIT!

package wordpress

import (
	"fmt"
)

const (
	// EntityTypePost is a EntityType of type Post
	EntityTypePost EntityType = iota + 1
	// EntityTypeLocation is a EntityType of type Location
	EntityTypeLocation
	// EntityTypeMovie is a EntityType of type Movie
	EntityTypeMovie
	// EntityTypeComic is a EntityType of type Comic
	EntityTypeComic
	// EntityTypeFeature is a EntityType of type Feature
	EntityTypeFeature
	// EntityTypeCategory is a EntityType of type Category
	EntityTypeCategory
	// EntityTypeLocationCat is a EntityType of type Location__cat
	EntityTypeLocationCat
)

const _EntityTypeName = "postlocationmoviecomicfeaturecategorylocation__cat"

var _EntityTypeMap = map[EntityType]string{
	1: _EntityTypeName[0:4],
	2: _EntityTypeName[4:12],
	3: _EntityTypeName[12:17],
	4: _EntityTypeName[17:22],
	5: _EntityTypeName[22:29],
	6: _EntityTypeName[29:37],
	7: _EntityTypeName[37:50],
}

// String implements the Stringer interface.
func (x EntityType) String() string {
	if str, ok := _EntityTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EntityType(%d)", x)
}

var _EntityTypeValue = map[string]EntityType{
	_EntityTypeName[0:4]:   1,
	_EntityTypeName[4:12]:  2,
	_EntityTypeName[12:17]: 3,
	_EntityTypeName[17:22]: 4,
	_EntityTypeName[22:29]: 5,
	_EntityTypeName[29:37]: 6,
	_EntityTypeName[37:50]: 7,
}

// ParseEntityType attempts to convert a string to a EntityType
func ParseEntityType(name string) (EntityType, error) {
	if x, ok := _EntityTypeValue[name]; ok {
		return x, nil
	}
	return EntityType(0), fmt.Errorf("%s is not a valid EntityType", name)
}

// MarshalText implements the text marshaller method
func (x EntityType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *EntityType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseEntityType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
