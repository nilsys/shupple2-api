// Code generated by go-enum
// DO NOT EDIT!

package wordpress

import (
	"fmt"
)

const (
	// CategoryTypeUndefined is a CategoryType of type Undefined
	CategoryTypeUndefined CategoryType = iota
	// CategoryTypeJapan is a CategoryType of type Japan
	CategoryTypeJapan
	// CategoryTypeWorld is a CategoryType of type World
	CategoryTypeWorld
	// CategoryTypeTheme is a CategoryType of type Theme
	CategoryTypeTheme
)

const _CategoryTypeName = "undefinedjapanworldtheme"

var _CategoryTypeMap = map[CategoryType]string{
	0: _CategoryTypeName[0:9],
	1: _CategoryTypeName[9:14],
	2: _CategoryTypeName[14:19],
	3: _CategoryTypeName[19:24],
}

// String implements the Stringer interface.
func (x CategoryType) String() string {
	if str, ok := _CategoryTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("CategoryType(%d)", x)
}

var _CategoryTypeValue = map[string]CategoryType{
	_CategoryTypeName[0:9]:   0,
	_CategoryTypeName[9:14]:  1,
	_CategoryTypeName[14:19]: 2,
	_CategoryTypeName[19:24]: 3,
}

// ParseCategoryType attempts to convert a string to a CategoryType
func ParseCategoryType(name string) (CategoryType, error) {
	if x, ok := _CategoryTypeValue[name]; ok {
		return x, nil
	}
	return CategoryType(0), fmt.Errorf("%s is not a valid CategoryType", name)
}

// MarshalText implements the text marshaller method
func (x CategoryType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *CategoryType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCategoryType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// EntityTypeUser is a EntityType of type User
	EntityTypeUser EntityType = iota + 1
	// EntityTypePost is a EntityType of type Post
	EntityTypePost
	// EntityTypeLocation is a EntityType of type Location
	EntityTypeLocation
	// EntityTypeMovie is a EntityType of type Movie
	EntityTypeMovie
	// EntityTypeComic is a EntityType of type Comic
	EntityTypeComic
	// EntityTypeFeature is a EntityType of type Feature
	EntityTypeFeature
	// EntityTypeCategory is a EntityType of type Category
	EntityTypeCategory
	// EntityTypeLocationCat is a EntityType of type Location__cat
	EntityTypeLocationCat
	// EntityTypeRevision is a EntityType of type Revision
	EntityTypeRevision
	// EntityTypeProject is a EntityType of type Project
	EntityTypeProject
	// EntityTypeReturnGift is a EntityType of type Return_gift
	EntityTypeReturnGift
)

const _EntityTypeName = "userpostlocationmoviecomicfeaturecategorylocation__catrevisionprojectreturn_gift"

var _EntityTypeMap = map[EntityType]string{
	1:  _EntityTypeName[0:4],
	2:  _EntityTypeName[4:8],
	3:  _EntityTypeName[8:16],
	4:  _EntityTypeName[16:21],
	5:  _EntityTypeName[21:26],
	6:  _EntityTypeName[26:33],
	7:  _EntityTypeName[33:41],
	8:  _EntityTypeName[41:54],
	9:  _EntityTypeName[54:62],
	10: _EntityTypeName[62:69],
	11: _EntityTypeName[69:80],
}

// String implements the Stringer interface.
func (x EntityType) String() string {
	if str, ok := _EntityTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EntityType(%d)", x)
}

var _EntityTypeValue = map[string]EntityType{
	_EntityTypeName[0:4]:   1,
	_EntityTypeName[4:8]:   2,
	_EntityTypeName[8:16]:  3,
	_EntityTypeName[16:21]: 4,
	_EntityTypeName[21:26]: 5,
	_EntityTypeName[26:33]: 6,
	_EntityTypeName[33:41]: 7,
	_EntityTypeName[41:54]: 8,
	_EntityTypeName[54:62]: 9,
	_EntityTypeName[62:69]: 10,
	_EntityTypeName[69:80]: 11,
}

// ParseEntityType attempts to convert a string to a EntityType
func ParseEntityType(name string) (EntityType, error) {
	if x, ok := _EntityTypeValue[name]; ok {
		return x, nil
	}
	return EntityType(0), fmt.Errorf("%s is not a valid EntityType", name)
}

// MarshalText implements the text marshaller method
func (x EntityType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *EntityType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseEntityType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// GiftTypeReservedTicket is a GiftType of type ReservedTicket
	GiftTypeReservedTicket GiftType = iota + 1
	// GiftTypeOther is a GiftType of type Other
	GiftTypeOther
)

const _GiftTypeName = "ReservedTicketOther"

var _GiftTypeMap = map[GiftType]string{
	1: _GiftTypeName[0:14],
	2: _GiftTypeName[14:19],
}

// String implements the Stringer interface.
func (x GiftType) String() string {
	if str, ok := _GiftTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("GiftType(%d)", x)
}

var _GiftTypeValue = map[string]GiftType{
	_GiftTypeName[0:14]:  1,
	_GiftTypeName[14:19]: 2,
}

// ParseGiftType attempts to convert a string to a GiftType
func ParseGiftType(name string) (GiftType, error) {
	if x, ok := _GiftTypeValue[name]; ok {
		return x, nil
	}
	return GiftType(0), fmt.Errorf("%s is not a valid GiftType", name)
}

// MarshalText implements the text marshaller method
func (x GiftType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *GiftType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseGiftType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// StatusPublish is a Status of type Publish
	StatusPublish Status = iota + 1
	// StatusFuture is a Status of type Future
	StatusFuture
	// StatusDraft is a Status of type Draft
	StatusDraft
	// StatusPending is a Status of type Pending
	StatusPending
	// StatusPrivate is a Status of type Private
	StatusPrivate
	// StatusTrash is a Status of type Trash
	StatusTrash
)

const _StatusName = "publishfuturedraftpendingprivatetrash"

var _StatusMap = map[Status]string{
	1: _StatusName[0:7],
	2: _StatusName[7:13],
	3: _StatusName[13:18],
	4: _StatusName[18:25],
	5: _StatusName[25:32],
	6: _StatusName[32:37],
}

// String implements the Stringer interface.
func (x Status) String() string {
	if str, ok := _StatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Status(%d)", x)
}

var _StatusValue = map[string]Status{
	_StatusName[0:7]:   1,
	_StatusName[7:13]:  2,
	_StatusName[13:18]: 3,
	_StatusName[18:25]: 4,
	_StatusName[25:32]: 5,
	_StatusName[32:37]: 6,
}

// ParseStatus attempts to convert a string to a Status
func ParseStatus(name string) (Status, error) {
	if x, ok := _StatusValue[name]; ok {
		return x, nil
	}
	return Status(0), fmt.Errorf("%s is not a valid Status", name)
}

// MarshalText implements the text marshaller method
func (x Status) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Status) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
