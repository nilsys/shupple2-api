// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package service

import (
	"github.com/golang/mock/gomock"
	"github.com/onsi/ginkgo"
	"github.com/stayway-corp/stayway-media-api/pkg/application/service/helper"
	"github.com/stayway-corp/stayway-media-api/pkg/config"
	"github.com/stayway-corp/stayway-media-api/pkg/domain/repository"
	"github.com/stayway-corp/stayway-media-api/pkg/domain/repository/payjp"
	"github.com/stayway-corp/stayway-media-api/pkg/mock"
	mock2 "github.com/stayway-corp/stayway-media-api/pkg/mock/payjp"
)

// Injectors from wire.go:

func InitializeTest(filePath config.FilePath) (*Test, error) {
	testReporter := ProvideTestReporter()
	controller := gomock.NewController(testReporter)
	cfInnReserveRequestCommandRepository := ProvideCfInnReserveRequestCmdRepo(controller)
	cfInnReserveRequestQueryRepository := ProvideCfInnReserveRequestQueryRepo(controller)
	paymentQueryRepository := ProvideMockPaymentQueryRepo(controller)
	paymentCommandRepository := ProvideMockPaymentCmdRepo(controller)
	mailCommandRepository := ProvideMockMailCmdRepo(controller)
	transactionService := ProvideMockTransactionService()
	cfInnReserveRequestCommandServiceImpl := &CfInnReserveRequestCommandServiceImpl{
		CfInnReserveRequestCommandRepository: cfInnReserveRequestCommandRepository,
		CfInnReserveRequestQueryRepository:   cfInnReserveRequestQueryRepository,
		PaymentQueryRepository:               paymentQueryRepository,
		PaymentCommandRepository:             paymentCommandRepository,
		MailCommandRepository:                mailCommandRepository,
		TransactionService:                   transactionService,
	}
	cardCommandRepository := ProvidePayjpCardCmdRepo(controller)
	cardQueryRepository := ProvideCardQueryRepo(controller)
	repositoryCardCommandRepository := ProvideCardCmdRepo(controller)
	cfProjectQueryRepository := ProvideCfProjectQueryRepo(controller)
	chargeCommandRepository := ProvideChargeCmdRepo(controller)
	cfReturnGiftQueryRepository := ProvideCfReturnGiftQueryRepo(controller)
	userQueryRepository := ProvideUserQueryRepo(controller)
	userCommandRepository := ProvideUserCmdRepo(controller)
	customerQueryRepository := ProvideCustomerQueryRepo(controller)
	customerCommandRepository := ProvideCustomerCmdRepo(controller)
	cfReturnGiftCommandRepository := ProvideCfReturnGiftCmdRepo(controller)
	shippingQueryRepository := ProvideShippingQueryRepo(controller)
	shippingCommandRepository := ProvideShippingCmdRepo(controller)
	cfProjectCommandRepository := ProvideCfProjectCmdRepo(controller)
	userSalesHistoryCommandRepository := ProvideUserSalesHistoryRepo(controller)
	inquiryCodeGeneratorImplForTest := &helper.InquiryCodeGeneratorImplForTest{}
	configConfig, err := config.GetConfig(filePath)
	if err != nil {
		return nil, err
	}
	cfProject := configConfig.CfProject
	chargeCommandServiceImpl := &ChargeCommandServiceImpl{
		PaymentCommandRepository:          paymentCommandRepository,
		PaymentQueryRepository:            paymentQueryRepository,
		PayjpCardCommandRepository:        cardCommandRepository,
		CardQueryRepository:               cardQueryRepository,
		CardCommandRepository:             repositoryCardCommandRepository,
		CfProjectQueryRepository:          cfProjectQueryRepository,
		ChargeCommandRepository:           chargeCommandRepository,
		CfReturnGiftQueryRepository:       cfReturnGiftQueryRepository,
		UserQueryRepository:               userQueryRepository,
		UserCommandRepository:             userCommandRepository,
		CustomerQueryRepository:           customerQueryRepository,
		CustomerCommandRepository:         customerCommandRepository,
		CfReturnGiftCommandRepository:     cfReturnGiftCommandRepository,
		ShippingQueryRepository:           shippingQueryRepository,
		ShippingCommandRepository:         shippingCommandRepository,
		CfProjectCommandRepository:        cfProjectCommandRepository,
		MailCommandRepository:             mailCommandRepository,
		UserSalesHistoryCommandRepository: userSalesHistoryCommandRepository,
		InquiryCodeGenerator:              inquiryCodeGeneratorImplForTest,
		TransactionService:                transactionService,
		CfProjectConfig:                   cfProject,
	}
	test := &Test{
		CfInnReserveRequestCommandServiceImpl: cfInnReserveRequestCommandServiceImpl,
		ChargeCommandServiceImpl:              chargeCommandServiceImpl,
	}
	return test, nil
}

// wire.go:

type Test struct {
	*CfInnReserveRequestCommandServiceImpl
	*ChargeCommandServiceImpl
}

func ProvideTestReporter() gomock.TestReporter {
	return ginkgo.GinkgoT()
}

func ProvideMockPaymentQueryRepo(ctrl *gomock.Controller) repository.PaymentQueryRepository {
	return mock.NewMockPaymentQueryRepository(ctrl)
}

func ProvideMockPaymentCmdRepo(ctrl *gomock.Controller) repository.PaymentCommandRepository {
	return mock.NewMockPaymentCommandRepository(ctrl)
}

func ProvideMockMailCmdRepo(ctrl *gomock.Controller) repository.MailCommandRepository {
	return mock.NewMockMailCommandRepository(ctrl)
}

func ProvideMockTransactionService() TransactionService {
	return TransactionServiceForTest{}
}

func ProvideCardQueryRepo(ctrl *gomock.Controller) repository.CardQueryRepository {
	return mock.NewMockCardQueryRepository(ctrl)
}

func ProvideCfProjectQueryRepo(ctrl *gomock.Controller) repository.CfProjectQueryRepository {
	return mock.NewMockCfProjectQueryRepository(ctrl)
}

func ProvideChargeCmdRepo(ctrl *gomock.Controller) payjp.ChargeCommandRepository {
	return mock.NewMockChargeCommandRepository(ctrl)
}

func ProvideCfReturnGiftQueryRepo(ctrl *gomock.Controller) repository.CfReturnGiftQueryRepository {
	return mock.NewMockCfReturnGiftQueryRepository(ctrl)
}

func ProvideUserQueryRepo(ctrl *gomock.Controller) repository.UserQueryRepository {
	return mock.NewMockUserQueryRepository(ctrl)
}

func ProvideUserCmdRepo(ctrl *gomock.Controller) repository.UserCommandRepository {
	return mock.NewMockUserCommandRepository(ctrl)
}

func ProvideCfReturnGiftCmdRepo(ctrl *gomock.Controller) repository.CfReturnGiftCommandRepository {
	return mock.NewMockCfReturnGiftCommandRepository(ctrl)
}

func ProvideShippingQueryRepo(ctrl *gomock.Controller) repository.ShippingQueryRepository {
	return mock.NewMockShippingQueryRepository(ctrl)
}

func ProvideCfProjectCmdRepo(ctrl *gomock.Controller) repository.CfProjectCommandRepository {
	return mock.NewMockCfProjectCommandRepository(ctrl)
}

func ProvideUserSalesHistoryRepo(ctrl *gomock.Controller) repository.UserSalesHistoryCommandRepository {
	return mock.NewMockUserSalesHistoryCommandRepository(ctrl)
}

func ProvideCfInnReserveRequestCmdRepo(ctrl *gomock.Controller) repository.CfInnReserveRequestCommandRepository {
	return mock.NewMockCfInnReserveRequestCommandRepository(ctrl)
}

func ProvideCfInnReserveRequestQueryRepo(ctrl *gomock.Controller) repository.CfInnReserveRequestQueryRepository {
	return mock.NewMockCfInnReserveRequestQueryRepository(ctrl)
}

func ProvidePayjpCardCmdRepo(ctrl *gomock.Controller) payjp.CardCommandRepository {
	return mock2.NewMockCardCommandRepository(ctrl)
}

func ProvideCardCmdRepo(ctrl *gomock.Controller) repository.CardCommandRepository {
	return mock.NewMockCardCommandRepository(ctrl)
}

func ProvideCustomerQueryRepo(ctrl *gomock.Controller) payjp.CustomerQueryRepository {
	return mock2.NewMockCustomerQueryRepository(ctrl)
}

func ProvideCustomerCmdRepo(ctrl *gomock.Controller) payjp.CustomerCommandRepository {
	return mock2.NewMockCustomerCommandRepository(ctrl)
}

func ProvideShippingCmdRepo(ctrl *gomock.Controller) repository.ShippingCommandRepository {
	return mock.NewMockShippingCommandRepository(ctrl)
}
