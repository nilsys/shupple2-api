// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package service

import (
	"github.com/golang/mock/gomock"
	"github.com/onsi/ginkgo"
	"github.com/stayway-corp/stayway-media-api/pkg/domain/repository"
	"github.com/stayway-corp/stayway-media-api/pkg/mock"
)

// Injectors from wire.go:

func InitializeTest() (*Test, error) {
	testReporter := ProvideTestReporter()
	controller := gomock.NewController(testReporter)
	paymentCommandRepository := ProvideMockPaymentCmdRepo(controller)
	paymentQueryRepository := ProvideMockPaymentQueryRepo(controller)
	mailCommandRepository := ProvideMockMailCmdRepo(controller)
	transactionService := ProvideMockTransactionService()
	paymentCommandServiceImpl := &PaymentCommandServiceImpl{
		PaymentCommandRepository: paymentCommandRepository,
		PaymentQueryRepository:   paymentQueryRepository,
		MailCommandRepository:    mailCommandRepository,
		TransactionService:       transactionService,
	}
	test := &Test{
		PaymentCommandServiceImpl: paymentCommandServiceImpl,
	}
	return test, nil
}

// wire.go:

type Test struct {
	*PaymentCommandServiceImpl
}

func ProvideTestReporter() gomock.TestReporter {
	return ginkgo.GinkgoT()
}

func ProvideMockPaymentQueryRepo(ctrl *gomock.Controller) repository.PaymentQueryRepository {
	return mock.NewMockPaymentQueryRepository(ctrl)
}

func ProvideMockPaymentCmdRepo(ctrl *gomock.Controller) repository.PaymentCommandRepository {
	return mock.NewMockPaymentCommandRepository(ctrl)
}

func ProvideMockMailCmdRepo(ctrl *gomock.Controller) repository.MailCommandRepository {
	return mock.NewMockMailCommandRepository(ctrl)
}

func ProvideMockTransactionService() TransactionService {
	return TransactionServiceForTest{}
}
