on:
  push:
    branches:
      - master
      - deploy/production
      - deploy/staging

env:
  INTERMEDIATE_TASK_DEFINITION: task-definition.json
  ECR_REPOSITORY: sw-media-api

name: Deploy
jobs:
  deploy-to-ecs:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Set variables
        id: variables
        run: |
          if [ "${{ github.ref }}" == "refs/heads/deploy/production" ]; then
            env="prd"
          else
            env="stg"
          fi
          echo "::set-output name=env::$env"
          echo "::set-output name=ecs-task-definition::sw-$env-media-api"
          echo "::set-output name=container-name::sw-$env-media-api"
          echo "::set-output name=service::sw-$env-media-api"
          echo "::set-output name=cluster::sw-$env-media"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set ECR repository name
        id: repository-name
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c 1-7)
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build and push image to Amazon ECR
        id: build-image
        if: "steps.variables.outputs.env != 'prd'"
        run: |
          docker build -t ${{ steps.repository-name.outputs.image }} --build-arg version=$IMAGE_TAG .
          docker push ${{ steps.repository-name.outputs.image }}

      - name: Fetch current task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ steps.variables.outputs.ecs-task-definition }} --query taskDefinition | \
          jq '(del(.revision, .requiresAttributes, .compatibilities, .taskDefinitionArn, .status))' > ${INTERMEDIATE_TASK_DEFINITION}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.INTERMEDIATE_TASK_DEFINITION }}
          container-name: ${{ steps.variables.outputs.container-name }}
          image: ${{ steps.repository-name.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ steps.variables.outputs.service }}
          cluster: ${{ steps.variables.outputs.cluster }}
          wait-for-service-stability: false

  deploy-to-lambda:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Set variables
        id: variables
        run: |
          if [ "${{ github.ref }}" == "refs/heads/deploy/production" ]; then
            env="prd"
          else
            env="stg"
          fi
          echo "::set-output name=env::$env"
          echo "::set-output name=stack-name::$env-media-lambda"

      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: 3.6

      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install awscli aws-sam-cli

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Build lambda binaries
        id: build-binary
        run: |
          make build-lambda
      
      - name: Deploy with SAM
        run: |
          rm -rf /tmp/bin
          mkdir /tmp/bin
          cp bin/stayway-media-lambda /tmp/bin
          sam deploy --stack-name ${{ steps.variables.outputs.stack-name }} --s3-bucket stayway-secret --s3-prefix artifacts/lambda --parameter-overrides Env=${{ steps.variables.outputs.env }} --capabilities CAPABILITY_IAM
