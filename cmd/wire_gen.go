// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/labstack/echo/v4"
	"github.com/stayway-corp/stayway-media-api/pkg/adaptor/api"
	"github.com/stayway-corp/stayway-media-api/pkg/adaptor/infrastructure/repository"
	"github.com/stayway-corp/stayway-media-api/pkg/application/service"
	"github.com/stayway-corp/stayway-media-api/pkg/config"
	"github.com/stayway-corp/stayway-media-api/pkg/domain/factory"
)

import (
	_ "github.com/jinzhu/gorm/dialects/mysql"
)

// Injectors from wire.go:

func InitializeApp(configFilePath2 config.ConfigFilePath) (*App, error) {
	configConfig, err := config.GetConfig(configFilePath2)
	if err != nil {
		return nil, err
	}
	echoEcho := echo.New()
	db, err := repository.ProvideDB(configConfig)
	if err != nil {
		return nil, err
	}
	postCommandRepositoryImpl := &repository.PostCommandRepositoryImpl{
		DB: db,
	}
	postCommandServiceImpl := &service.PostCommandServiceImpl{
		Repository: postCommandRepositoryImpl,
	}
	postCommandController := api.PostCommandController{
		PostService: postCommandServiceImpl,
	}
	postQueryRepositoryImpl := &repository.PostQueryRepositoryImpl{
		DB: db,
	}
	categoryQueryRepositoryImpl := &repository.CategoryQueryRepositoryImpl{
		DB: db,
	}
	postCategoryFactoryImpl := &factory.PostCategoryFactoryImpl{
		CategoryQueryRepository: categoryQueryRepositoryImpl,
	}
	postQueryServiceImpl := &service.PostQueryServiceImpl{
		PostQueryRepository: postQueryRepositoryImpl,
		PostCategoryFactory: postCategoryFactoryImpl,
	}
	postQueryController := api.PostQueryController{
		PostService: postQueryServiceImpl,
	}
	app := &App{
		Config:                configConfig,
		Echo:                  echoEcho,
		PostCommandController: postCommandController,
		PostQueryController:   postQueryController,
	}
	return app, nil
}

// wire.go:

var controllerSet = wire.NewSet(api.PostQueryControllerSet, api.PostCommandControllerSet)

var repositorySet = wire.NewSet(repository.ProvideDB, repository.PostQueryRepositorySet, repository.PostCommandRepositorySet, repository.CategoryQueryRepositorySet)

var serviceSet = wire.NewSet(service.PostQueryServiceSet, service.PostCommandServiceSet)

var factorySet = wire.NewSet(factory.PostCategoryFactorySet)

type App struct {
	Config                *config.Config
	Echo                  *echo.Echo
	PostCommandController api.PostCommandController
	PostQueryController   api.PostQueryController
}
