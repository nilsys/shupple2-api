// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/stayway-corp/stayway-media-api/pkg/adaptor/infrastructure/repository"
	"github.com/stayway-corp/stayway-media-api/pkg/application/service"
	"github.com/stayway-corp/stayway-media-api/pkg/config"
)

// Injectors from wire.go:

func InitializeLambda(env EnvString) (*Lambda, error) {
	config, err := getConfig(env)
	if err != nil {
		return nil, err
	}
	aws := config.AWS
	session, err := repository.ProvideAWSSession(config)
	if err != nil {
		return nil, err
	}
	mediaQueryRepositoryImpl := &repository.MediaQueryRepositoryImpl{
		AWSConfig:  aws,
		AWSSession: session,
	}
	mediaCommandRepositoryImpl := &repository.MediaCommandRepositoryImpl{
		AWSConfig:  aws,
		AWSSession: session,
	}
	mediaCommandServiceImpl := &service.MediaCommandServiceImpl{
		AWSConfig:              aws,
		AWSSession:             session,
		MediaQueryRepository:   mediaQueryRepositoryImpl,
		MediaCommandRepository: mediaCommandRepositoryImpl,
	}
	lambda := &Lambda{
		Config:              config,
		MediaCommandService: mediaCommandServiceImpl,
	}
	return lambda, nil
}

// wire.go:

var serviceSet = wire.NewSet(service.MediaCommandServiceSet)

type EnvString string

func getConfig(envString EnvString) (*config.Config, error) {
	if envString == "" {
		return config.GetConfig(config.DefaultConfigFilePath)
	}

	env, err := config.ParseEnv(string(envString))
	if err != nil {
		return nil, err
	}

	return config.GetConfigFromSSM(env)
}
