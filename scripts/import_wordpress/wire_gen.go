// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/stayway-corp/stayway-media-api/pkg/adaptor/infrastructure/repository"
	"github.com/stayway-corp/stayway-media-api/pkg/application/service"
	"github.com/stayway-corp/stayway-media-api/pkg/config"
)

// Injectors from wire.go:

func InitializeScript(configFilePath config.ConfigFilePath) (*Script, error) {
	configConfig, err := config.GetConfig(configFilePath)
	if err != nil {
		return nil, err
	}
	db, err := repository.ProvideDB(configConfig)
	if err != nil {
		return nil, err
	}
	wordpress := configConfig.Wordpress
	wordpressQueryRepository := repository.NewWordpressQueryRepositoryImpl(wordpress)
	session, err := repository.ProvideAWSSession(configConfig)
	if err != nil {
		return nil, err
	}
	uploader := repository.ProvideS3Uploader(session)
	aws := configConfig.AWS
	userCommandRepositoryImpl := &repository.UserCommandRepositoryImpl{
		DB:            db,
		MediaUploader: uploader,
		AWSConfig:     aws,
	}
	categoryCommandRepositoryImpl := &repository.CategoryCommandRepositoryImpl{
		DB: db,
	}
	userQueryRepositoryImpl := &repository.UserQueryRepositoryImpl{
		DB: db,
	}
	categoryQueryRepositoryImpl := &repository.CategoryQueryRepositoryImpl{
		DB: db,
	}
	hashtagQueryRepositoryImpl := &repository.HashtagQueryRepositoryImpl{
		DB: db,
	}
	dao := repository.DAO{
		DB_: db,
	}
	hashtagCommandRepositoryImpl := &repository.HashtagCommandRepositoryImpl{
		DAO: dao,
	}
	hashtagCommandServiceImpl := &service.HashtagCommandServiceImpl{
		HashtagQueryRepository:   hashtagQueryRepositoryImpl,
		HashtagCommandRepository: hashtagCommandRepositoryImpl,
	}
	wordpressServiceImpl := &service.WordpressServiceImpl{
		WordpressQueryRepository: wordpressQueryRepository,
		UserQueryRepository:      userQueryRepositoryImpl,
		CategoryQueryRepository:  categoryQueryRepositoryImpl,
		HashtagCommandService:    hashtagCommandServiceImpl,
	}
	categoryCommandServiceImpl := &service.CategoryCommandServiceImpl{
		CategoryCommandRepository: categoryCommandRepositoryImpl,
		WordpressQueryRepository:  wordpressQueryRepository,
		WordpressService:          wordpressServiceImpl,
	}
	comicCommandRepositoryImpl := &repository.ComicCommandRepositoryImpl{
		DB: db,
	}
	comicCommandServiceImpl := &service.ComicCommandServiceImpl{
		ComicCommandRepository:   comicCommandRepositoryImpl,
		WordpressQueryRepository: wordpressQueryRepository,
		WordpressService:         wordpressServiceImpl,
	}
	featureCommandRepositoryImpl := &repository.FeatureCommandRepositoryImpl{
		DB: db,
	}
	featureCommandServiceImpl := &service.FeatureCommandServiceImpl{
		FeatureCommandRepository: featureCommandRepositoryImpl,
		WordpressQueryRepository: wordpressQueryRepository,
		WordpressService:         wordpressServiceImpl,
	}
	lcategoryCommandRepositoryImpl := &repository.LcategoryCommandRepositoryImpl{
		DB: db,
	}
	lcategoryCommandServiceImpl := &service.LcategoryCommandServiceImpl{
		LcategoryCommandRepository: lcategoryCommandRepositoryImpl,
		WordpressQueryRepository:   wordpressQueryRepository,
		WordpressService:           wordpressServiceImpl,
	}
	postCommandRepositoryImpl := &repository.PostCommandRepositoryImpl{
		DB: db,
	}
	transactionServiceImpl := &repository.TransactionServiceImpl{
		DB: db,
	}
	postCommandServiceImpl := &service.PostCommandServiceImpl{
		PostCommandRepository:    postCommandRepositoryImpl,
		HashtagCommandRepository: hashtagCommandRepositoryImpl,
		WordpressQueryRepository: wordpressQueryRepository,
		WordpressService:         wordpressServiceImpl,
		TransactionService:       transactionServiceImpl,
	}
	touristSpotCommandRepositoryImpl := &repository.TouristSpotCommandRepositoryImpl{
		DB: db,
	}
	touristSpotCommandServiceImpl := &service.TouristSpotCommandServiceImpl{
		TouristSpotCommandRepository: touristSpotCommandRepositoryImpl,
		WordpressQueryRepository:     wordpressQueryRepository,
		WordpressService:             wordpressServiceImpl,
	}
	vlogCommandRepositoryImpl := &repository.VlogCommandRepositoryImpl{
		DB: db,
	}
	vlogCommandServiceImpl := &service.VlogCommandServiceImpl{
		VlogCommandRepository:    vlogCommandRepositoryImpl,
		WordpressQueryRepository: wordpressQueryRepository,
		WordpressService:         wordpressServiceImpl,
	}
	script := &Script{
		DB:                  db,
		Config:              configConfig,
		WordpressRepo:       wordpressQueryRepository,
		UserRepo:            userCommandRepositoryImpl,
		CategoryCommandRepo: categoryCommandRepositoryImpl,
		CategoryService:     categoryCommandServiceImpl,
		ComicService:        comicCommandServiceImpl,
		FeatureService:      featureCommandServiceImpl,
		LcategoryService:    lcategoryCommandServiceImpl,
		PostService:         postCommandServiceImpl,
		TouristSpotService:  touristSpotCommandServiceImpl,
		VlogService:         vlogCommandServiceImpl,
	}
	return script, nil
}

// wire.go:

var serviceSet = wire.NewSet(service.PostQueryServiceSet, service.PostCommandServiceSet, service.WordpressServiceSet, service.CategoryCommandServiceSet, service.ComicCommandServiceSet, service.FeatureCommandServiceSet, service.LcategoryCommandServiceSet, service.TouristSpotCommandServiceSet, service.VlogCommandServiceSet, service.HashtagCommandServiceSet)
