// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/stayway-corp/stayway-media-api/pkg/adaptor/infrastructure/client"
	"github.com/stayway-corp/stayway-media-api/pkg/adaptor/infrastructure/repository"
	"github.com/stayway-corp/stayway-media-api/pkg/adaptor/infrastructure/repository/payjp"
	"github.com/stayway-corp/stayway-media-api/pkg/application/scenario"
	service2 "github.com/stayway-corp/stayway-media-api/pkg/application/service"
	"github.com/stayway-corp/stayway-media-api/pkg/config"
	"github.com/stayway-corp/stayway-media-api/pkg/domain/service"
)

// Injectors from wire.go:

func InitializeScript(configFilePath config.FilePath) (*Script, error) {
	configConfig, err := config.GetConfig(configFilePath)
	if err != nil {
		return nil, err
	}
	db, err := repository.ProvideDB(configConfig)
	if err != nil {
		return nil, err
	}
	session, err := repository.ProvideAWSSession(configConfig)
	if err != nil {
		return nil, err
	}
	uploader := repository.ProvideS3Uploader(session)
	aws := configConfig.AWS
	wordpressQueryRepositoryImpl := repository.NewWordpressQueryRepositoryImpl(configConfig)
	userQueryRepositoryImpl := &repository.UserQueryRepositoryImpl{
		DB:         db,
		AWSConfig:  aws,
		AWSSession: session,
	}
	dao := repository.DAO{
		UnderlyingDB: db,
	}
	userCommandRepositoryImpl := &repository.UserCommandRepositoryImpl{
		DAO:           dao,
		MediaUploader: uploader,
		AWSConfig:     aws,
		AWSSession:    session,
	}
	userValidatorDomainServiceImpl := &service.UserValidatorDomainServiceImpl{
		UserQueryRepository: userQueryRepositoryImpl,
	}
	payjpService := repository.ProvidePayjp(configConfig)
	customerCommandRepositoryImpl := &payjp.CustomerCommandRepositoryImpl{
		PayjpClient: payjpService,
	}
	customerQueryRepositoryImpl := &payjp.CustomerQueryRepositoryImpl{
		PayjpClient: payjpService,
	}
	authService, err := service2.ProvideAuthService(configConfig)
	if err != nil {
		return nil, err
	}
	noticeCommandRepositoryImpl := &repository.NoticeCommandRepositoryImpl{
		DAO: dao,
	}
	noticeQueryRepositoryImpl := &repository.NoticeQueryRepositoryImpl{
		DAO: dao,
	}
	firebaseAppWrap, err := repository.ProvideFirebaseApp(session, configConfig)
	if err != nil {
		return nil, err
	}
	fcmClientWrap, err := repository.ProvideFcmClient(firebaseAppWrap)
	if err != nil {
		return nil, err
	}
	cloudMessageCommandRepository := repository.ProvideFcmRepo(fcmClientWrap)
	taggedUserDomainServiceImpl := service.TaggedUserDomainServiceImpl{
		UserQueryRepository: userQueryRepositoryImpl,
	}
	noticeDomainServiceImpl := &service.NoticeDomainServiceImpl{
		NoticeCommandRepository:       noticeCommandRepositoryImpl,
		UserQueryRepository:           userQueryRepositoryImpl,
		NoticeQueryRepository:         noticeQueryRepositoryImpl,
		CloudMessageCommandRepository: cloudMessageCommandRepository,
		TaggedUserDomainService:       taggedUserDomainServiceImpl,
	}
	transactionServiceImpl := &repository.TransactionServiceImpl{
		DB: db,
	}
	userCommandServiceImpl := &service2.UserCommandServiceImpl{
		UserCommandRepository:      userCommandRepositoryImpl,
		UserQueryRepository:        userQueryRepositoryImpl,
		WordpressQueryRepository:   wordpressQueryRepositoryImpl,
		UserValidatorDomainService: userValidatorDomainServiceImpl,
		CustomerCommandRepository:  customerCommandRepositoryImpl,
		CustomerQueryRepository:    customerQueryRepositoryImpl,
		AuthService:                authService,
		NoticeDomainService:        noticeDomainServiceImpl,
		TransactionService:         transactionServiceImpl,
	}
	areaCategoryCommandRepositoryImpl := &repository.AreaCategoryCommandRepositoryImpl{
		DAO: dao,
	}
	areaCategoryQueryRepositoryImpl := &repository.AreaCategoryQueryRepositoryImpl{
		DB: db,
	}
	themeCategoryQueryRepositoryImpl := &repository.ThemeCategoryQueryRepositoryImpl{
		DB: db,
	}
	spotCategoryQueryRepositoryImpl := &repository.SpotCategoryQueryRepositoryImpl{
		DB: db,
	}
	hashtagQueryRepositoryImpl := &repository.HashtagQueryRepositoryImpl{
		DB: db,
	}
	hashtagCommandRepositoryImpl := &repository.HashtagCommandRepositoryImpl{
		DAO: dao,
	}
	hashtagCommandServiceImpl := &service2.HashtagCommandServiceImpl{
		HashtagQueryRepository:   hashtagQueryRepositoryImpl,
		HashtagCommandRepository: hashtagCommandRepositoryImpl,
	}
	wordpressServiceImpl := &service2.WordpressServiceImpl{
		WordpressQueryRepository:     wordpressQueryRepositoryImpl,
		UserQueryRepository:          userQueryRepositoryImpl,
		AreaCategoryQueryRepository:  areaCategoryQueryRepositoryImpl,
		ThemeCategoryQueryRepository: themeCategoryQueryRepositoryImpl,
		SpotCategoryQueryRepository:  spotCategoryQueryRepositoryImpl,
		HashtagCommandService:        hashtagCommandServiceImpl,
	}
	areaCategoryCommandServiceImpl := &service2.AreaCategoryCommandServiceImpl{
		AreaCategoryCommandRepository: areaCategoryCommandRepositoryImpl,
		AreaCategoryQueryRepository:   areaCategoryQueryRepositoryImpl,
		WordpressQueryRepository:      wordpressQueryRepositoryImpl,
		WordpressService:              wordpressServiceImpl,
		TransactionService:            transactionServiceImpl,
	}
	themeCategoryCommandRepositoryImpl := &repository.ThemeCategoryCommandRepositoryImpl{
		DAO: dao,
	}
	themeCategoryCommandServiceImpl := &service2.ThemeCategoryCommandServiceImpl{
		ThemeCategoryCommandRepository: themeCategoryCommandRepositoryImpl,
		ThemeCategoryQueryRepository:   themeCategoryQueryRepositoryImpl,
		WordpressQueryRepository:       wordpressQueryRepositoryImpl,
		WordpressService:               wordpressServiceImpl,
		TransactionService:             transactionServiceImpl,
	}
	categoryCommandServiceImpl := &service2.CategoryCommandServiceImpl{
		AreaCategoryCommandService:  areaCategoryCommandServiceImpl,
		ThemeCategoryCommandService: themeCategoryCommandServiceImpl,
		WordpressQueryRepository:    wordpressQueryRepositoryImpl,
	}
	comicCommandRepositoryImpl := &repository.ComicCommandRepositoryImpl{
		DAO: dao,
	}
	comicCommandServiceImpl := &service2.ComicCommandServiceImpl{
		ComicCommandRepository:   comicCommandRepositoryImpl,
		WordpressQueryRepository: wordpressQueryRepositoryImpl,
		WordpressService:         wordpressServiceImpl,
		TransactionService:       transactionServiceImpl,
	}
	featureCommandRepositoryImpl := &repository.FeatureCommandRepositoryImpl{
		DAO: dao,
	}
	featureCommandServiceImpl := &service2.FeatureCommandServiceImpl{
		FeatureCommandRepository: featureCommandRepositoryImpl,
		WordpressQueryRepository: wordpressQueryRepositoryImpl,
		WordpressService:         wordpressServiceImpl,
		TransactionService:       transactionServiceImpl,
	}
	spotCategoryCommandRepositoryImpl := &repository.SpotCategoryCommandRepositoryImpl{
		DAO: dao,
	}
	spotCategoryCommandServiceImpl := &service2.SpotCategoryCommandServiceImpl{
		SpotCategoryCommandRepository: spotCategoryCommandRepositoryImpl,
		WordpressQueryRepository:      wordpressQueryRepositoryImpl,
		WordpressService:              wordpressServiceImpl,
		TransactionService:            transactionServiceImpl,
	}
	postCommandRepositoryImpl := &repository.PostCommandRepositoryImpl{
		DAO: dao,
	}
	cfProjectCommandRepositoryImpl := &repository.CfProjectCommandRepositoryImpl{
		DAO: dao,
	}
	postCommandServiceImpl := &service2.PostCommandServiceImpl{
		PostCommandRepository:      postCommandRepositoryImpl,
		HashtagCommandRepository:   hashtagCommandRepositoryImpl,
		WordpressQueryRepository:   wordpressQueryRepositoryImpl,
		CfProjectCommandRepository: cfProjectCommandRepositoryImpl,
		WordpressService:           wordpressServiceImpl,
		TransactionService:         transactionServiceImpl,
	}
	touristSpotCommandRepositoryImpl := &repository.TouristSpotCommandRepositoryImpl{
		DAO: dao,
	}
	touristSpotCommandServiceImpl := &service2.TouristSpotCommandServiceImpl{
		TouristSpotCommandRepository: touristSpotCommandRepositoryImpl,
		WordpressQueryRepository:     wordpressQueryRepositoryImpl,
		WordpressService:             wordpressServiceImpl,
		TransactionService:           transactionServiceImpl,
	}
	vlogCommandRepositoryImpl := &repository.VlogCommandRepositoryImpl{
		DAO: dao,
	}
	vlogCommandServiceImpl := &service2.VlogCommandServiceImpl{
		VlogCommandRepository:    vlogCommandRepositoryImpl,
		WordpressQueryRepository: wordpressQueryRepositoryImpl,
		WordpressService:         wordpressServiceImpl,
		TransactionService:       transactionServiceImpl,
	}
	reviewQueryRepositoryImpl := &repository.ReviewQueryRepositoryImpl{
		DB: db,
	}
	stayway := configConfig.Stayway
	staywayMetasearch := stayway.Metasearch
	clientConfig := _wireConfigValue
	clientClient := client.NewClient(clientConfig)
	innQueryRepositoryImpl := &repository.InnQueryRepositoryImpl{
		MetasearchConfig: staywayMetasearch,
		Client:           clientClient,
	}
	metasearchAreaQueryRepositoryImpl := &repository.MetasearchAreaQueryRepositoryImpl{
		DB: db,
	}
	reviewQueryServiceImpl := &service2.ReviewQueryServiceImpl{
		ReviewQueryRepository:         reviewQueryRepositoryImpl,
		InnQueryRepository:            innQueryRepositoryImpl,
		MetasearchAreaQueryRepository: metasearchAreaQueryRepositoryImpl,
	}
	reviewCommandRepositoryImpl := &repository.ReviewCommandRepositoryImpl{
		DAO:        dao,
		AWSSession: session,
		AWSConfig:  aws,
	}
	reviewCommandServiceImpl := &service2.ReviewCommandServiceImpl{
		ReviewQueryRepository:        reviewQueryRepositoryImpl,
		ReviewCommandRepository:      reviewCommandRepositoryImpl,
		HashtagCommandRepository:     hashtagCommandRepositoryImpl,
		InnQueryRepository:           innQueryRepositoryImpl,
		TouristSpotCommandRepository: touristSpotCommandRepositoryImpl,
		NoticeDomainService:          noticeDomainServiceImpl,
		TransactionService:           transactionServiceImpl,
	}
	reviewCommandScenarioImpl := &scenario.ReviewCommandScenarioImpl{
		ReviewQueryService:    reviewQueryServiceImpl,
		ReviewCommandService:  reviewCommandServiceImpl,
		HashtagCommandService: hashtagCommandServiceImpl,
		UserQueryRepository:   userQueryRepositoryImpl,
	}
	script := &Script{
		DB:                    db,
		Config:                configConfig,
		MediaUploader:         uploader,
		AWSConfig:             aws,
		WordpressRepo:         wordpressQueryRepositoryImpl,
		UserQueryRepository:   userQueryRepositoryImpl,
		UserRepo:              userCommandRepositoryImpl,
		UserService:           userCommandServiceImpl,
		CategoryService:       categoryCommandServiceImpl,
		ComicService:          comicCommandServiceImpl,
		FeatureService:        featureCommandServiceImpl,
		SpotCategoryService:   spotCategoryCommandServiceImpl,
		PostService:           postCommandServiceImpl,
		TouristSpotService:    touristSpotCommandServiceImpl,
		VlogService:           vlogCommandServiceImpl,
		ReviewCommandScenario: reviewCommandScenarioImpl,
	}
	return script, nil
}

var (
	_wireConfigValue = &client.Config{}
)

// wire.go:

var serviceSet = wire.NewSet(service2.ProvideAuthService, service2.PostQueryServiceSet, service2.PostCommandServiceSet, service2.WordpressServiceSet, service2.UserCommandServiceSet, service2.CategoryCommandServiceSet, service2.AreaCategoryCommandServiceSet, service2.ThemeCategoryCommandServiceSet, service2.ComicCommandServiceSet, service2.FeatureCommandServiceSet, service2.SpotCategoryCommandServiceSet, service2.TouristSpotCommandServiceSet, service2.VlogCommandServiceSet, service2.HashtagCommandServiceSet, service2.ReviewCommandServiceSet, service2.ReviewQueryServiceSet, scenario.ReviewCommandScenarioSet, service.NoticeDomainServiceSet, service.TaggedUserDomainServiceSet, service.UserValidatorDomainServiceSet)
