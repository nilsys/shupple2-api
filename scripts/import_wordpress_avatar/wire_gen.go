// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/stayway-corp/stayway-media-api/pkg/adaptor/infrastructure/repository"
	"github.com/stayway-corp/stayway-media-api/pkg/adaptor/infrastructure/repository/payjp"
	"github.com/stayway-corp/stayway-media-api/pkg/application/scenario"
	service2 "github.com/stayway-corp/stayway-media-api/pkg/application/service"
	"github.com/stayway-corp/stayway-media-api/pkg/config"
	"github.com/stayway-corp/stayway-media-api/pkg/domain/service"
)

// Injectors from wire.go:

func InitializeScript(configFilePath config.FilePath) (*Script, error) {
	configConfig, err := config.GetConfig(configFilePath)
	if err != nil {
		return nil, err
	}
	db, err := repository.ProvideDB(configConfig)
	if err != nil {
		return nil, err
	}
	session, err := repository.ProvideAWSSession(configConfig)
	if err != nil {
		return nil, err
	}
	uploader := repository.ProvideS3Uploader(session)
	aws := configConfig.AWS
	wordpressQueryRepositoryImpl := repository.NewWordpressQueryRepositoryImpl(configConfig)
	dao := repository.DAO{
		UnderlyingDB: db,
	}
	userCommandRepositoryImpl := &repository.UserCommandRepositoryImpl{
		DAO:           dao,
		MediaUploader: uploader,
		AWSConfig:     aws,
		AWSSession:    session,
	}
	userQueryRepositoryImpl := &repository.UserQueryRepositoryImpl{
		DB:         db,
		AWSConfig:  aws,
		AWSSession: session,
	}
	userValidatorDomainServiceImpl := &service.UserValidatorDomainServiceImpl{
		UserQueryRepository: userQueryRepositoryImpl,
	}
	payjpService := repository.ProvidePayjp(configConfig)
	customerCommandRepositoryImpl := &payjp.CustomerCommandRepositoryImpl{
		PayjpClient: payjpService,
	}
	customerQueryRepositoryImpl := &payjp.CustomerQueryRepositoryImpl{
		PayjpClient: payjpService,
	}
	authService, err := service2.ProvideAuthService(configConfig)
	if err != nil {
		return nil, err
	}
	noticeCommandRepositoryImpl := &repository.NoticeCommandRepositoryImpl{
		DAO: dao,
	}
	noticeQueryRepositoryImpl := &repository.NoticeQueryRepositoryImpl{
		DAO: dao,
	}
	firebaseAppWrap, err := repository.ProvideFirebaseApp(session, configConfig)
	if err != nil {
		return nil, err
	}
	fcmClientWrap, err := repository.ProvideFcmClient(firebaseAppWrap)
	if err != nil {
		return nil, err
	}
	cloudMessageCommandRepository := repository.ProvideFcmRepo(fcmClientWrap)
	taggedUserDomainServiceImpl := service.TaggedUserDomainServiceImpl{
		UserQueryRepository: userQueryRepositoryImpl,
	}
	noticeDomainServiceImpl := &service.NoticeDomainServiceImpl{
		NoticeCommandRepository:       noticeCommandRepositoryImpl,
		UserQueryRepository:           userQueryRepositoryImpl,
		NoticeQueryRepository:         noticeQueryRepositoryImpl,
		CloudMessageCommandRepository: cloudMessageCommandRepository,
		TaggedUserDomainService:       taggedUserDomainServiceImpl,
	}
	transactionServiceImpl := &repository.TransactionServiceImpl{
		DB: db,
	}
	userCommandServiceImpl := &service2.UserCommandServiceImpl{
		UserCommandRepository:      userCommandRepositoryImpl,
		UserQueryRepository:        userQueryRepositoryImpl,
		WordpressQueryRepository:   wordpressQueryRepositoryImpl,
		UserValidatorDomainService: userValidatorDomainServiceImpl,
		CustomerCommandRepository:  customerCommandRepositoryImpl,
		CustomerQueryRepository:    customerQueryRepositoryImpl,
		AuthService:                authService,
		NoticeDomainService:        noticeDomainServiceImpl,
		TransactionService:         transactionServiceImpl,
	}
	script := &Script{
		DB:            db,
		Config:        configConfig,
		MediaUploader: uploader,
		AWSConfig:     aws,
		WordpressRepo: wordpressQueryRepositoryImpl,
		UserRepo:      userCommandRepositoryImpl,
		UserService:   userCommandServiceImpl,
	}
	return script, nil
}

// wire.go:

var serviceSet = wire.NewSet(service2.ProvideAuthService, service2.PostQueryServiceSet, service2.PostCommandServiceSet, service2.WordpressServiceSet, service2.UserCommandServiceSet, service2.CategoryCommandServiceSet, service2.AreaCategoryCommandServiceSet, service2.ThemeCategoryCommandServiceSet, service2.ComicCommandServiceSet, service2.FeatureCommandServiceSet, service2.SpotCategoryCommandServiceSet, service2.TouristSpotCommandServiceSet, service2.VlogCommandServiceSet, service2.HashtagCommandServiceSet, service2.ReviewCommandServiceSet, service2.ReviewQueryServiceSet, scenario.ReviewCommandScenarioSet, service.NoticeDomainServiceSet, service.TaggedUserDomainServiceSet, service.UserValidatorDomainServiceSet)
